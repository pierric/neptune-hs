{-
   Neptune Backend API

   No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

   OpenAPI Version: 3.0.1
   Neptune Backend API API version: 2.8
   Generated by OpenAPI Generator (https://openapi-generator.tech)
-}

{-|
Module : NeptuneBackend.API.ApiDefault
-}

{-# LANGUAGE FlexibleContexts      #-}
{-# LANGUAGE FlexibleInstances     #-}
{-# LANGUAGE MonoLocalBinds        #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings     #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module NeptuneBackend.API.ApiDefault where

import           NeptuneBackend.Core
import           NeptuneBackend.MimeTypes
import           NeptuneBackend.Model                  as M

import qualified Data.Aeson                            as A
import qualified Data.ByteString                       as B
import qualified Data.ByteString.Lazy                  as BL
import qualified Data.Data                             as P (TypeRep, Typeable,
                                                             typeOf, typeRep)
import qualified Data.Foldable                         as P
import qualified Data.Map                              as Map
import qualified Data.Maybe                            as P
import qualified Data.Proxy                            as P (Proxy (..))
import qualified Data.Set                              as Set
import qualified Data.String                           as P
import qualified Data.Text                             as T
import qualified Data.Text.Encoding                    as T
import qualified Data.Text.Lazy                        as TL
import qualified Data.Text.Lazy.Encoding               as TL
import qualified Data.Time                             as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media                    as ME
import qualified Network.HTTP.Types                    as NH
import qualified Web.FormUrlEncoded                    as WH
import qualified Web.HttpApiData                       as WH

import           Data.Text                             (Text)
import           GHC.Base                              ((<|>))

import           Prelude                               (Applicative, Bool (..),
                                                        Char, Double, FilePath,
                                                        Float, Functor, Int,
                                                        Integer, Maybe (..),
                                                        Monad, String, fmap,
                                                        maybe, mempty, pure,
                                                        undefined, ($), (.),
                                                        (/=), (<$>), (<*>),
                                                        (==), (>>=))
import qualified Prelude                               as P

-- * Operations


-- ** Default

-- *** abortExperiments

-- | @POST \/api\/leaderboard\/v1\/experiments\/abort@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
abortExperiments
  :: (Consumes AbortExperiments contentType, MimeRender contentType ExperimentIds)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> Accept accept -- ^ request accept ('MimeType')
  -> ExperimentIds -- ^ "experimentIds"
  -> NeptuneBackendRequest AbortExperiments contentType [BatchExperimentUpdateResult] accept
abortExperiments _  _ experimentIds =
  _mkRequest "POST" ["/api/leaderboard/v1/experiments/abort"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)
    `setBodyParam` experimentIds

data AbortExperiments
instance HasBodyParam AbortExperiments ExperimentIds
instance HasOptionalParam AbortExperiments MarkOnly where
  applyOptionalParam req (MarkOnly xs) =
    req `addQuery` toQuery ("markOnly", Just xs)

-- | @*/*@
instance MimeType mtype => Consumes AbortExperiments mtype

-- | @*/*@
instance MimeType mtype => Produces AbortExperiments mtype


-- *** acceptOrganizationInvitation

-- | @POST \/api\/backend\/v1\/invitations\/organization\/{invitationId}\/accept@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
-- Note: Has 'Produces' instances, but no response schema
--
acceptOrganizationInvitation
  :: Accept accept -- ^ request accept ('MimeType')
  -> InvitationId -- ^ "invitationId"
  -> NeptuneBackendRequest AcceptOrganizationInvitation MimeNoContent res accept
acceptOrganizationInvitation  _ (InvitationId invitationId) =
  _mkRequest "POST" ["/api/backend/v1/invitations/organization/",toPath invitationId,"/accept"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)

data AcceptOrganizationInvitation
-- | @*/*@
instance MimeType mtype => Produces AcceptOrganizationInvitation mtype


-- *** acceptProjectInvitation

-- | @POST \/api\/backend\/v1\/invitations\/project\/{invitationId}\/accept@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
-- Note: Has 'Produces' instances, but no response schema
--
acceptProjectInvitation
  :: Accept accept -- ^ request accept ('MimeType')
  -> InvitationId -- ^ "invitationId"
  -> NeptuneBackendRequest AcceptProjectInvitation MimeNoContent res accept
acceptProjectInvitation  _ (InvitationId invitationId) =
  _mkRequest "POST" ["/api/backend/v1/invitations/project/",toPath invitationId,"/accept"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)

data AcceptProjectInvitation
-- | @*/*@
instance MimeType mtype => Produces AcceptProjectInvitation mtype


-- *** addOrganizationMember

-- | @POST \/api\/backend\/v1\/organizations2\/{organizationIdentifier}\/members@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
addOrganizationMember
  :: (Consumes AddOrganizationMember contentType, MimeRender contentType NewOrganizationMemberDTO)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> Accept accept -- ^ request accept ('MimeType')
  -> NewOrganizationMemberDTO -- ^ "member"
  -> OrganizationIdentifier -- ^ "organizationIdentifier"
  -> NeptuneBackendRequest AddOrganizationMember contentType OrganizationMemberDTO accept
addOrganizationMember _  _ member (OrganizationIdentifier organizationIdentifier) =
  _mkRequest "POST" ["/api/backend/v1/organizations2/",toPath organizationIdentifier,"/members"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)
    `setBodyParam` member

data AddOrganizationMember
instance HasBodyParam AddOrganizationMember NewOrganizationMemberDTO

-- | @*/*@
instance MimeType mtype => Consumes AddOrganizationMember mtype

-- | @*/*@
instance MimeType mtype => Produces AddOrganizationMember mtype


-- *** addProjectMember

-- | @POST \/api\/backend\/v1\/projects\/members@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
addProjectMember
  :: (Consumes AddProjectMember contentType, MimeRender contentType NewProjectMemberDTO)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> Accept accept -- ^ request accept ('MimeType')
  -> NewProjectMemberDTO -- ^ "member"
  -> ProjectIdentifier -- ^ "projectIdentifier"
  -> NeptuneBackendRequest AddProjectMember contentType ProjectMemberDTO accept
addProjectMember _  _ member (ProjectIdentifier projectIdentifier) =
  _mkRequest "POST" ["/api/backend/v1/projects/members"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)
    `setBodyParam` member
    `addQuery` toQuery ("projectIdentifier", Just projectIdentifier)

data AddProjectMember
instance HasBodyParam AddProjectMember NewProjectMemberDTO

-- | @*/*@
instance MimeType mtype => Consumes AddProjectMember mtype

-- | @*/*@
instance MimeType mtype => Produces AddProjectMember mtype


-- *** addUserProfileLink

-- | @POST \/api\/backend\/v1\/userProfile\/links@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
-- Note: Has 'Produces' instances, but no response schema
--
addUserProfileLink
  :: (Consumes AddUserProfileLink contentType, MimeRender contentType UserProfileLinkDTO)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> Accept accept -- ^ request accept ('MimeType')
  -> UserProfileLinkDTO -- ^ "link"
  -> NeptuneBackendRequest AddUserProfileLink contentType res accept
addUserProfileLink _  _ link =
  _mkRequest "POST" ["/api/backend/v1/userProfile/links"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)
    `setBodyParam` link

data AddUserProfileLink
instance HasBodyParam AddUserProfileLink UserProfileLinkDTO

-- | @*/*@
instance MimeType mtype => Consumes AddUserProfileLink mtype

-- | @*/*@
instance MimeType mtype => Produces AddUserProfileLink mtype


-- *** authorize

-- | @GET \/api\/backend\/v1\/authorization\/authorize@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
authorize
  :: Accept accept -- ^ request accept ('MimeType')
  -> NeptuneBackendRequest Authorize MimeNoContent AuthorizedUserDTO accept
authorize  _ =
  _mkRequest "GET" ["/api/backend/v1/authorization/authorize"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)

data Authorize
-- | @*/*@
instance MimeType mtype => Produces Authorize mtype


-- *** cancelSubscription

-- | @POST \/api\/backend\/v1\/organizations2\/{organizationId}\/cancelSubscription@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
-- Note: Has 'Produces' instances, but no response schema
--
cancelSubscription
  :: (Consumes CancelSubscription contentType, MimeRender contentType SubscriptionCancelInfoDTO)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> Accept accept -- ^ request accept ('MimeType')
  -> SubscriptionCancelInfoDTO -- ^ "subscriptionCancel"
  -> OrganizationId -- ^ "organizationId"
  -> NeptuneBackendRequest CancelSubscription contentType res accept
cancelSubscription _  _ subscriptionCancel (OrganizationId organizationId) =
  _mkRequest "POST" ["/api/backend/v1/organizations2/",toPath organizationId,"/cancelSubscription"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)
    `setBodyParam` subscriptionCancel

data CancelSubscription
instance HasBodyParam CancelSubscription SubscriptionCancelInfoDTO

-- | @*/*@
instance MimeType mtype => Consumes CancelSubscription mtype

-- | @*/*@
instance MimeType mtype => Produces CancelSubscription mtype


-- *** changePassword

-- | @PUT \/api\/backend\/v1\/userProfile\/password@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
changePassword
  :: (Consumes ChangePassword contentType, MimeRender contentType PasswordChangeDTO)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> Accept accept -- ^ request accept ('MimeType')
  -> PasswordChangeDTO -- ^ "passwordToUpdate"
  -> NeptuneBackendRequest ChangePassword contentType PasswordChangeDTO accept
changePassword _  _ passwordToUpdate =
  _mkRequest "PUT" ["/api/backend/v1/userProfile/password"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)
    `setBodyParam` passwordToUpdate

data ChangePassword
instance HasBodyParam ChangePassword PasswordChangeDTO

-- | @*/*@
instance MimeType mtype => Consumes ChangePassword mtype

-- | @*/*@
instance MimeType mtype => Produces ChangePassword mtype


-- *** configInfoGet

-- | @GET \/api\/backend\/v1\/configInfo@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
configInfoGet
  :: Accept accept -- ^ request accept ('MimeType')
  -> NeptuneBackendRequest ConfigInfoGet MimeNoContent ConfigInfo accept
configInfoGet  _ =
  _mkRequest "GET" ["/api/backend/v1/configInfo"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)

data ConfigInfoGet
-- | @*/*@
instance MimeType mtype => Produces ConfigInfoGet mtype


-- *** createCardUpdateSession

-- | @POST \/api\/backend\/v1\/payments\/{organizationIdentifier}\/creditCard@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
createCardUpdateSession
  :: (Consumes CreateCardUpdateSession contentType, MimeRender contentType CreateSessionParamsDTO)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> Accept accept -- ^ request accept ('MimeType')
  -> CreateSessionParamsDTO -- ^ "createSessionParams" -  Stripe Checkout Session details
  -> OrganizationIdentifier -- ^ "organizationIdentifier"
  -> NeptuneBackendRequest CreateCardUpdateSession contentType SessionDTO accept
createCardUpdateSession _  _ createSessionParams (OrganizationIdentifier organizationIdentifier) =
  _mkRequest "POST" ["/api/backend/v1/payments/",toPath organizationIdentifier,"/creditCard"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)
    `setBodyParam` createSessionParams

data CreateCardUpdateSession

-- | /Body Param/ "createSessionParams" - Stripe Checkout Session details
instance HasBodyParam CreateCardUpdateSession CreateSessionParamsDTO

-- | @*/*@
instance MimeType mtype => Consumes CreateCardUpdateSession mtype

-- | @*/*@
instance MimeType mtype => Produces CreateCardUpdateSession mtype


-- *** createChannel

-- | @POST \/api\/leaderboard\/v1\/channels\/user@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
createChannel
  :: (Consumes CreateChannel contentType, MimeRender contentType ChannelParams)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> Accept accept -- ^ request accept ('MimeType')
  -> ChannelParams -- ^ "channelToCreate"
  -> ExperimentId -- ^ "experimentId"
  -> NeptuneBackendRequest CreateChannel contentType ChannelDTO accept
createChannel _  _ channelToCreate (ExperimentId experimentId) =
  _mkRequest "POST" ["/api/leaderboard/v1/channels/user"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)
    `setBodyParam` channelToCreate
    `addQuery` toQuery ("experimentId", Just experimentId)

data CreateChannel
instance HasBodyParam CreateChannel ChannelParams

-- | @*/*@
instance MimeType mtype => Consumes CreateChannel mtype

-- | @*/*@
instance MimeType mtype => Produces CreateChannel mtype


-- *** createChart

-- | @POST \/api\/backend\/v1\/chartSets\/{chartSetId}\/charts@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
createChart
  :: (Consumes CreateChart contentType, MimeRender contentType ChartDefinition)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> Accept accept -- ^ request accept ('MimeType')
  -> ChartDefinition -- ^ "chartToCreate"
  -> ChartSetId -- ^ "chartSetId"
  -> NeptuneBackendRequest CreateChart contentType Chart accept
createChart _  _ chartToCreate (ChartSetId chartSetId) =
  _mkRequest "POST" ["/api/backend/v1/chartSets/",toPath chartSetId,"/charts"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)
    `setBodyParam` chartToCreate

data CreateChart
instance HasBodyParam CreateChart ChartDefinition

-- | @*/*@
instance MimeType mtype => Consumes CreateChart mtype

-- | @*/*@
instance MimeType mtype => Produces CreateChart mtype


-- *** createChartSet

-- | @POST \/api\/backend\/v1\/chartSets@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
createChartSet
  :: (Consumes CreateChartSet contentType, MimeRender contentType ChartSetParams)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> Accept accept -- ^ request accept ('MimeType')
  -> ChartSetParams -- ^ "chartSetToCreate"
  -> ProjectId -- ^ "projectId"
  -> NeptuneBackendRequest CreateChartSet contentType ChartSet accept
createChartSet _  _ chartSetToCreate (ProjectId projectId) =
  _mkRequest "POST" ["/api/backend/v1/chartSets"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)
    `setBodyParam` chartSetToCreate
    `addQuery` toQuery ("projectId", Just projectId)

data CreateChartSet
instance HasBodyParam CreateChartSet ChartSetParams

-- | @*/*@
instance MimeType mtype => Consumes CreateChartSet mtype

-- | @*/*@
instance MimeType mtype => Produces CreateChartSet mtype


-- *** createCheckoutSession

-- | @POST \/api\/backend\/v1\/payments\/{organizationIdentifier}\/session@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
createCheckoutSession
  :: (Consumes CreateCheckoutSession contentType, MimeRender contentType CreateSessionParamsDTO)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> Accept accept -- ^ request accept ('MimeType')
  -> CreateSessionParamsDTO -- ^ "createSessionParams" -  Stripe Checkout Session details
  -> OrganizationIdentifier -- ^ "organizationIdentifier"
  -> NeptuneBackendRequest CreateCheckoutSession contentType SessionDTO accept
createCheckoutSession _  _ createSessionParams (OrganizationIdentifier organizationIdentifier) =
  _mkRequest "POST" ["/api/backend/v1/payments/",toPath organizationIdentifier,"/session"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)
    `setBodyParam` createSessionParams

data CreateCheckoutSession

-- | /Body Param/ "createSessionParams" - Stripe Checkout Session details
instance HasBodyParam CreateCheckoutSession CreateSessionParamsDTO

-- | @*/*@
instance MimeType mtype => Consumes CreateCheckoutSession mtype

-- | @*/*@
instance MimeType mtype => Produces CreateCheckoutSession mtype


-- *** createExperiment

-- | @POST \/api\/leaderboard\/v1\/experiments@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
createExperiment
  :: (Consumes CreateExperiment contentType, MimeRender contentType ExperimentCreationParams)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> Accept accept -- ^ request accept ('MimeType')
  -> ExperimentCreationParams -- ^ "experimentCreationParams"
  -> NeptuneBackendRequest CreateExperiment contentType Experiment accept
createExperiment _  _ experimentCreationParams =
  _mkRequest "POST" ["/api/leaderboard/v1/experiments"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)
    `setBodyParam` experimentCreationParams

data CreateExperiment
instance HasBodyParam CreateExperiment ExperimentCreationParams
instance HasOptionalParam CreateExperiment XNeptuneCliVersion where
  applyOptionalParam req (XNeptuneCliVersion xs) =
    req `addHeader` toHeader ("X-Neptune-CliVersion", xs)

-- | @*/*@
instance MimeType mtype => Consumes CreateExperiment mtype

-- | @*/*@
instance MimeType mtype => Produces CreateExperiment mtype


-- *** createOrganization

-- | @POST \/api\/backend\/v1\/organizations2@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
createOrganization
  :: (Consumes CreateOrganization contentType, MimeRender contentType OrganizationCreationParamsDTO)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> Accept accept -- ^ request accept ('MimeType')
  -> OrganizationCreationParamsDTO -- ^ "organizationToCreate"
  -> NeptuneBackendRequest CreateOrganization contentType OrganizationDTO accept
createOrganization _  _ organizationToCreate =
  _mkRequest "POST" ["/api/backend/v1/organizations2"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)
    `setBodyParam` organizationToCreate

data CreateOrganization
instance HasBodyParam CreateOrganization OrganizationCreationParamsDTO

-- | @*/*@
instance MimeType mtype => Consumes CreateOrganization mtype

-- | @*/*@
instance MimeType mtype => Produces CreateOrganization mtype


-- *** createOrganizationInvitation

-- | @POST \/api\/backend\/v1\/invitations\/organization@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
createOrganizationInvitation
  :: (Consumes CreateOrganizationInvitation contentType, MimeRender contentType NewOrganizationInvitationDTO)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> Accept accept -- ^ request accept ('MimeType')
  -> NewOrganizationInvitationDTO -- ^ "newOrganizationInvitation" -  addToAllProjects flag is ignored when roleGrant value is admin
  -> NeptuneBackendRequest CreateOrganizationInvitation contentType OrganizationInvitationDTO accept
createOrganizationInvitation _  _ newOrganizationInvitation =
  _mkRequest "POST" ["/api/backend/v1/invitations/organization"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)
    `setBodyParam` newOrganizationInvitation

data CreateOrganizationInvitation

-- | /Body Param/ "newOrganizationInvitation" - addToAllProjects flag is ignored when roleGrant value is admin
instance HasBodyParam CreateOrganizationInvitation NewOrganizationInvitationDTO

-- | @*/*@
instance MimeType mtype => Consumes CreateOrganizationInvitation mtype

-- | @*/*@
instance MimeType mtype => Produces CreateOrganizationInvitation mtype


-- *** createProject

-- | @POST \/api\/backend\/v1\/projects@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
createProject
  :: (Consumes CreateProject contentType, MimeRender contentType NewProjectDTO)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> Accept accept -- ^ request accept ('MimeType')
  -> NewProjectDTO -- ^ "projectToCreate"
  -> NeptuneBackendRequest CreateProject contentType ProjectWithRoleDTO accept
createProject _  _ projectToCreate =
  _mkRequest "POST" ["/api/backend/v1/projects"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)
    `setBodyParam` projectToCreate

data CreateProject
instance HasBodyParam CreateProject NewProjectDTO

-- | @*/*@
instance MimeType mtype => Consumes CreateProject mtype

-- | @*/*@
instance MimeType mtype => Produces CreateProject mtype


-- *** createProjectInvitation

-- | @POST \/api\/backend\/v1\/invitations\/project@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
createProjectInvitation
  :: (Consumes CreateProjectInvitation contentType, MimeRender contentType NewProjectInvitationDTO)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> Accept accept -- ^ request accept ('MimeType')
  -> NewProjectInvitationDTO -- ^ "newProjectInvitation"
  -> NeptuneBackendRequest CreateProjectInvitation contentType ProjectInvitationDTO accept
createProjectInvitation _  _ newProjectInvitation =
  _mkRequest "POST" ["/api/backend/v1/invitations/project"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)
    `setBodyParam` newProjectInvitation

data CreateProjectInvitation
instance HasBodyParam CreateProjectInvitation NewProjectInvitationDTO

-- | @*/*@
instance MimeType mtype => Consumes CreateProjectInvitation mtype

-- | @*/*@
instance MimeType mtype => Produces CreateProjectInvitation mtype


-- *** createReservation

-- | @POST \/api\/backend\/v1\/reservations@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
-- Note: Has 'Produces' instances, but no response schema
--
createReservation
  :: (Consumes CreateReservation contentType, MimeRender contentType NewReservationDTO)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> Accept accept -- ^ request accept ('MimeType')
  -> NewReservationDTO -- ^ "newReservation"
  -> NeptuneBackendRequest CreateReservation contentType res accept
createReservation _  _ newReservation =
  _mkRequest "POST" ["/api/backend/v1/reservations"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)
    `setBodyParam` newReservation

data CreateReservation
instance HasBodyParam CreateReservation NewReservationDTO

-- | @*/*@
instance MimeType mtype => Consumes CreateReservation mtype

-- | @*/*@
instance MimeType mtype => Produces CreateReservation mtype


-- *** createSystemChannel

-- | @POST \/api\/backend\/v1\/channels\/system@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
createSystemChannel
  :: (Consumes CreateSystemChannel contentType, MimeRender contentType ChannelParams)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> Accept accept -- ^ request accept ('MimeType')
  -> ChannelParams -- ^ "channelToCreate"
  -> ExperimentId -- ^ "experimentId"
  -> NeptuneBackendRequest CreateSystemChannel contentType ChannelDTO accept
createSystemChannel _  _ channelToCreate (ExperimentId experimentId) =
  _mkRequest "POST" ["/api/backend/v1/channels/system"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)
    `setBodyParam` channelToCreate
    `addQuery` toQuery ("experimentId", Just experimentId)

data CreateSystemChannel
instance HasBodyParam CreateSystemChannel ChannelParams

-- | @*/*@
instance MimeType mtype => Consumes CreateSystemChannel mtype

-- | @*/*@
instance MimeType mtype => Produces CreateSystemChannel mtype


-- *** createSystemMetric

-- | @POST \/api\/backend\/v1\/experiments\/{experimentId}\/system\/metrics@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
createSystemMetric
  :: (Consumes CreateSystemMetric contentType, MimeRender contentType SystemMetricParams)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> Accept accept -- ^ request accept ('MimeType')
  -> SystemMetricParams -- ^ "metricToCreate"
  -> ExperimentId -- ^ "experimentId"
  -> NeptuneBackendRequest CreateSystemMetric contentType SystemMetric accept
createSystemMetric _  _ metricToCreate (ExperimentId experimentId) =
  _mkRequest "POST" ["/api/backend/v1/experiments/",toPath experimentId,"/system/metrics"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)
    `setBodyParam` metricToCreate

data CreateSystemMetric
instance HasBodyParam CreateSystemMetric SystemMetricParams

-- | @*/*@
instance MimeType mtype => Consumes CreateSystemMetric mtype

-- | @*/*@
instance MimeType mtype => Produces CreateSystemMetric mtype


-- *** deleteChart

-- | @DELETE \/api\/backend\/v1\/chartSets\/{chartSetId}\/charts\/{chartId}@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
-- Note: Has 'Produces' instances, but no response schema
--
deleteChart
  :: Accept accept -- ^ request accept ('MimeType')
  -> ChartId -- ^ "chartId"
  -> ChartSetId -- ^ "chartSetId"
  -> NeptuneBackendRequest DeleteChart MimeNoContent res accept
deleteChart  _ (ChartId chartId) (ChartSetId chartSetId) =
  _mkRequest "DELETE" ["/api/backend/v1/chartSets/",toPath chartSetId,"/charts/",toPath chartId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)

data DeleteChart
-- | @*/*@
instance MimeType mtype => Produces DeleteChart mtype


-- *** deleteChartSet

-- | @DELETE \/api\/backend\/v1\/chartSets\/{chartSetId}@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
-- Note: Has 'Produces' instances, but no response schema
--
deleteChartSet
  :: Accept accept -- ^ request accept ('MimeType')
  -> ChartSetId -- ^ "chartSetId"
  -> NeptuneBackendRequest DeleteChartSet MimeNoContent res accept
deleteChartSet  _ (ChartSetId chartSetId) =
  _mkRequest "DELETE" ["/api/backend/v1/chartSets/",toPath chartSetId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)

data DeleteChartSet
-- | @*/*@
instance MimeType mtype => Produces DeleteChartSet mtype


-- *** deleteExperimentOutput

-- | @DELETE \/api\/leaderboard\/v1\/storage\/deleteOutput@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
-- Note: Has 'Produces' instances, but no response schema
--
deleteExperimentOutput
  :: Accept accept -- ^ request accept ('MimeType')
  -> ExperimentIdentifier -- ^ "experimentIdentifier"
  -> Path -- ^ "path"
  -> NeptuneBackendRequest DeleteExperimentOutput MimeNoContent res accept
deleteExperimentOutput  _ (ExperimentIdentifier experimentIdentifier) (Path path) =
  _mkRequest "DELETE" ["/api/leaderboard/v1/storage/deleteOutput"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)
    `addQuery` toQuery ("experimentIdentifier", Just experimentIdentifier)
    `addQuery` toQuery ("path", Just path)

data DeleteExperimentOutput
-- | @*/*@
instance MimeType mtype => Produces DeleteExperimentOutput mtype


-- *** deleteOrganization

-- | @DELETE \/api\/backend\/v1\/organizations2\/{organizationId}@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
-- Note: Has 'Produces' instances, but no response schema
--
deleteOrganization
  :: Accept accept -- ^ request accept ('MimeType')
  -> OrganizationId -- ^ "organizationId"
  -> NeptuneBackendRequest DeleteOrganization MimeNoContent res accept
deleteOrganization  _ (OrganizationId organizationId) =
  _mkRequest "DELETE" ["/api/backend/v1/organizations2/",toPath organizationId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)

data DeleteOrganization
-- | @*/*@
instance MimeType mtype => Produces DeleteOrganization mtype


-- *** deleteOrganizationMember

-- | @DELETE \/api\/backend\/v1\/organizations2\/{organizationIdentifier}\/members\/{userId}@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
-- Note: Has 'Produces' instances, but no response schema
--
deleteOrganizationMember
  :: Accept accept -- ^ request accept ('MimeType')
  -> OrganizationIdentifier -- ^ "organizationIdentifier"
  -> UserId -- ^ "userId"
  -> NeptuneBackendRequest DeleteOrganizationMember MimeNoContent res accept
deleteOrganizationMember  _ (OrganizationIdentifier organizationIdentifier) (UserId userId) =
  _mkRequest "DELETE" ["/api/backend/v1/organizations2/",toPath organizationIdentifier,"/members/",toPath userId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)

data DeleteOrganizationMember
-- | @*/*@
instance MimeType mtype => Produces DeleteOrganizationMember mtype


-- *** deleteProject

-- | @DELETE \/api\/backend\/v1\/projects@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
-- Note: Has 'Produces' instances, but no response schema
--
deleteProject
  :: Accept accept -- ^ request accept ('MimeType')
  -> ProjectIdentifier -- ^ "projectIdentifier"
  -> NeptuneBackendRequest DeleteProject MimeNoContent res accept
deleteProject  _ (ProjectIdentifier projectIdentifier) =
  _mkRequest "DELETE" ["/api/backend/v1/projects"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)
    `addQuery` toQuery ("projectIdentifier", Just projectIdentifier)

data DeleteProject
-- | @*/*@
instance MimeType mtype => Produces DeleteProject mtype


-- *** deleteProjectMember

-- | @DELETE \/api\/backend\/v1\/projects\/members\/{userId}@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
-- Note: Has 'Produces' instances, but no response schema
--
deleteProjectMember
  :: Accept accept -- ^ request accept ('MimeType')
  -> ProjectIdentifier -- ^ "projectIdentifier"
  -> UserId -- ^ "userId"
  -> NeptuneBackendRequest DeleteProjectMember MimeNoContent res accept
deleteProjectMember  _ (ProjectIdentifier projectIdentifier) (UserId userId) =
  _mkRequest "DELETE" ["/api/backend/v1/projects/members/",toPath userId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)
    `addQuery` toQuery ("projectIdentifier", Just projectIdentifier)

data DeleteProjectMember
-- | @*/*@
instance MimeType mtype => Produces DeleteProjectMember mtype


-- *** deleteUserProfileLink

-- | @DELETE \/api\/backend\/v1\/userProfile\/links@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
-- Note: Has 'Produces' instances, but no response schema
--
deleteUserProfileLink
  :: (Consumes DeleteUserProfileLink contentType, MimeRender contentType LinkDTO)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> Accept accept -- ^ request accept ('MimeType')
  -> LinkDTO -- ^ "link"
  -> NeptuneBackendRequest DeleteUserProfileLink contentType res accept
deleteUserProfileLink _  _ link =
  _mkRequest "DELETE" ["/api/backend/v1/userProfile/links"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)
    `setBodyParam` link

data DeleteUserProfileLink
instance HasBodyParam DeleteUserProfileLink LinkDTO

-- | @*/*@
instance MimeType mtype => Consumes DeleteUserProfileLink mtype

-- | @*/*@
instance MimeType mtype => Produces DeleteUserProfileLink mtype


-- *** deprecatedGetChannelValues

-- | @GET \/api\/backend\/v1\/channels\/{channelId}\/values@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
deprecatedGetChannelValues
  :: Accept accept -- ^ request accept ('MimeType')
  -> ChannelId -- ^ "channelId"
  -> NeptuneBackendRequest DeprecatedGetChannelValues MimeNoContent LimitedChannelValuesDTO accept
deprecatedGetChannelValues  _ (ChannelId channelId) =
  _mkRequest "GET" ["/api/backend/v1/channels/",toPath channelId,"/values"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)

data DeprecatedGetChannelValues
instance HasOptionalParam DeprecatedGetChannelValues Offset where
  applyOptionalParam req (Offset xs) =
    req `addQuery` toQuery ("offset", Just xs)
instance HasOptionalParam DeprecatedGetChannelValues Limit where
  applyOptionalParam req (Limit xs) =
    req `addQuery` toQuery ("limit", Just xs)
-- | @*/*@
instance MimeType mtype => Produces DeprecatedGetChannelValues mtype


-- *** deprecatedGetChannelValuesCSV

-- | @GET \/api\/backend\/v1\/channels\/{channelId}\/csv@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
-- Note: Has 'Produces' instances, but no response schema
--
deprecatedGetChannelValuesCSV
  :: Accept accept -- ^ request accept ('MimeType')
  -> ChannelId -- ^ "channelId"
  -> NeptuneBackendRequest DeprecatedGetChannelValuesCSV MimeNoContent res accept
deprecatedGetChannelValuesCSV  _ (ChannelId channelId) =
  _mkRequest "GET" ["/api/backend/v1/channels/",toPath channelId,"/csv"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)

data DeprecatedGetChannelValuesCSV
instance HasOptionalParam DeprecatedGetChannelValuesCSV ExperimentId where
  applyOptionalParam req (ExperimentId xs) =
    req `addQuery` toQuery ("experimentId", Just xs)
instance HasOptionalParam DeprecatedGetChannelValuesCSV Gzipped where
  applyOptionalParam req (Gzipped xs) =
    req `addQuery` toQuery ("gzipped", Just xs)
-- | @*/*@
instance MimeType mtype => Produces DeprecatedGetChannelValuesCSV mtype


-- *** downgradeTeamOrganization

-- | @DELETE \/api\/backend\/v1\/payments\/{organizationIdentifier}\/downgrade@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
-- Note: Has 'Produces' instances, but no response schema
--
downgradeTeamOrganization
  :: Accept accept -- ^ request accept ('MimeType')
  -> OrganizationIdentifier -- ^ "organizationIdentifier"
  -> NeptuneBackendRequest DowngradeTeamOrganization MimeNoContent res accept
downgradeTeamOrganization  _ (OrganizationIdentifier organizationIdentifier) =
  _mkRequest "DELETE" ["/api/backend/v1/payments/",toPath organizationIdentifier,"/downgrade"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)

data DowngradeTeamOrganization
-- | @*/*@
instance MimeType mtype => Produces DowngradeTeamOrganization mtype


-- *** downloadData

-- | @GET \/api\/leaderboard\/v1\/storage\/legacy\/download@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
-- Note: Has 'Produces' instances, but no response schema
--
downloadData
  :: Accept accept -- ^ request accept ('MimeType')
  -> ProjectId -- ^ "projectId"
  -> Path -- ^ "path"
  -> NeptuneBackendRequest DownloadData MimeNoContent res accept
downloadData  _ (ProjectId projectId) (Path path) =
  _mkRequest "GET" ["/api/leaderboard/v1/storage/legacy/download"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)
    `addQuery` toQuery ("projectId", Just projectId)
    `addQuery` toQuery ("path", Just path)

data DownloadData
-- | @*/*@
instance MimeType mtype => Produces DownloadData mtype


-- *** emptyExperimentsTrash

-- | @POST \/api\/leaderboard\/v1\/experiments\/trash\/empty@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
emptyExperimentsTrash
  :: (Consumes EmptyExperimentsTrash contentType, MimeRender contentType ExperimentIds)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> Accept accept -- ^ request accept ('MimeType')
  -> ExperimentIds -- ^ "experimentIds"
  -> NeptuneBackendRequest EmptyExperimentsTrash contentType [BatchExperimentUpdateResult] accept
emptyExperimentsTrash _  _ experimentIds =
  _mkRequest "POST" ["/api/leaderboard/v1/experiments/trash/empty"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)
    `setBodyParam` experimentIds

data EmptyExperimentsTrash
instance HasBodyParam EmptyExperimentsTrash ExperimentIds

-- | @*/*@
instance MimeType mtype => Consumes EmptyExperimentsTrash mtype

-- | @*/*@
instance MimeType mtype => Produces EmptyExperimentsTrash mtype


-- *** exchangeApiToken

-- | @GET \/api\/backend\/v1\/authorization\/oauth-token@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
exchangeApiToken
  :: Accept accept -- ^ request accept ('MimeType')
  -> XNeptuneApiToken -- ^ "xNeptuneApiToken"
  -> NeptuneBackendRequest ExchangeApiToken MimeNoContent NeptuneOauthToken accept
exchangeApiToken  _ (XNeptuneApiToken xNeptuneApiToken) =
  _mkRequest "GET" ["/api/backend/v1/authorization/oauth-token"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)
    `addHeader` toHeader ("X-Neptune-Api-Token", xNeptuneApiToken)

data ExchangeApiToken
-- | @*/*@
instance MimeType mtype => Produces ExchangeApiToken mtype


-- *** filterOrganizations

-- | @GET \/api\/backend\/v1\/organizations2@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
filterOrganizations
  :: Accept accept -- ^ request accept ('MimeType')
  -> Ids -- ^ "ids"
  -> NeptuneBackendRequest FilterOrganizations MimeNoContent [OrganizationDTO] accept
filterOrganizations  _ (Ids ids) =
  _mkRequest "GET" ["/api/backend/v1/organizations2"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)
    `addQuery` toQueryColl MultiParamArray ("ids", Just ids)

data FilterOrganizations
-- | @*/*@
instance MimeType mtype => Produces FilterOrganizations mtype


-- *** generateProjectKey

-- | @GET \/api\/backend\/v1\/projects\/key@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
generateProjectKey
  :: Accept accept -- ^ request accept ('MimeType')
  -> OrganizationId -- ^ "organizationId"
  -> ProjectName -- ^ "projectName"
  -> NeptuneBackendRequest GenerateProjectKey MimeNoContent ProjectKeyDTO accept
generateProjectKey  _ (OrganizationId organizationId) (ProjectName projectName) =
  _mkRequest "GET" ["/api/backend/v1/projects/key"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)
    `addQuery` toQuery ("organizationId", Just organizationId)
    `addQuery` toQuery ("projectName", Just projectName)

data GenerateProjectKey
-- | @*/*@
instance MimeType mtype => Produces GenerateProjectKey mtype


-- *** getAchievements

-- | @GET \/api\/backend\/v1\/achievements@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
getAchievements
  :: Accept accept -- ^ request accept ('MimeType')
  -> NeptuneBackendRequest GetAchievements MimeNoContent AchievementsDTO accept
getAchievements  _ =
  _mkRequest "GET" ["/api/backend/v1/achievements"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)

data GetAchievements
-- | @*/*@
instance MimeType mtype => Produces GetAchievements mtype


-- *** getApiToken

-- | @GET \/api\/backend\/v1\/authorization\/api-token@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
getApiToken
  :: Accept accept -- ^ request accept ('MimeType')
  -> NeptuneBackendRequest GetApiToken MimeNoContent NeptuneApiToken accept
getApiToken  _ =
  _mkRequest "GET" ["/api/backend/v1/authorization/api-token"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)

data GetApiToken
-- | @*/*@
instance MimeType mtype => Produces GetApiToken mtype


-- *** getChannelValues

-- | @GET \/api\/leaderboard\/v1\/channels\/{channelId}\/values@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
getChannelValues
  :: Accept accept -- ^ request accept ('MimeType')
  -> ChannelId -- ^ "channelId"
  -> NeptuneBackendRequest GetChannelValues MimeNoContent LimitedChannelValuesDTO accept
getChannelValues  _ (ChannelId channelId) =
  _mkRequest "GET" ["/api/leaderboard/v1/channels/",toPath channelId,"/values"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)

data GetChannelValues
instance HasOptionalParam GetChannelValues Offset where
  applyOptionalParam req (Offset xs) =
    req `addQuery` toQuery ("offset", Just xs)
instance HasOptionalParam GetChannelValues Limit where
  applyOptionalParam req (Limit xs) =
    req `addQuery` toQuery ("limit", Just xs)
-- | @*/*@
instance MimeType mtype => Produces GetChannelValues mtype


-- *** getChannelValuesCSV

-- | @GET \/api\/leaderboard\/v1\/channels\/{channelId}\/csv@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
-- Note: Has 'Produces' instances, but no response schema
--
getChannelValuesCSV
  :: Accept accept -- ^ request accept ('MimeType')
  -> ChannelId -- ^ "channelId"
  -> NeptuneBackendRequest GetChannelValuesCSV MimeNoContent res accept
getChannelValuesCSV  _ (ChannelId channelId) =
  _mkRequest "GET" ["/api/leaderboard/v1/channels/",toPath channelId,"/csv"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)

data GetChannelValuesCSV
instance HasOptionalParam GetChannelValuesCSV ExperimentId where
  applyOptionalParam req (ExperimentId xs) =
    req `addQuery` toQuery ("experimentId", Just xs)
instance HasOptionalParam GetChannelValuesCSV Gzipped where
  applyOptionalParam req (Gzipped xs) =
    req `addQuery` toQuery ("gzipped", Just xs)
-- | @*/*@
instance MimeType mtype => Produces GetChannelValuesCSV mtype


-- *** getChannelsLastValues

-- | @GET \/api\/backend\/v1\/channels\/lastValues@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
getChannelsLastValues
  :: Accept accept -- ^ request accept ('MimeType')
  -> ExperimentId -- ^ "experimentId"
  -> NeptuneBackendRequest GetChannelsLastValues MimeNoContent [ChannelWithValueDTO] accept
getChannelsLastValues  _ (ExperimentId experimentId) =
  _mkRequest "GET" ["/api/backend/v1/channels/lastValues"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)
    `addQuery` toQuery ("experimentId", Just experimentId)

data GetChannelsLastValues
-- | @*/*@
instance MimeType mtype => Produces GetChannelsLastValues mtype


-- *** getChartSet

-- | @GET \/api\/backend\/v1\/chartSets\/{chartSetId}@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
getChartSet
  :: Accept accept -- ^ request accept ('MimeType')
  -> ChartSetId -- ^ "chartSetId"
  -> NeptuneBackendRequest GetChartSet MimeNoContent ChartSet accept
getChartSet  _ (ChartSetId chartSetId) =
  _mkRequest "GET" ["/api/backend/v1/chartSets/",toPath chartSetId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)

data GetChartSet
-- | @*/*@
instance MimeType mtype => Produces GetChartSet mtype


-- *** getClientConfig

-- | @GET \/api\/backend\/v1\/clients\/config@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
getClientConfig
  :: Accept accept -- ^ request accept ('MimeType')
  -> XNeptuneApiToken -- ^ "xNeptuneApiToken"
  -> NeptuneBackendRequest GetClientConfig MimeNoContent ClientConfig accept
getClientConfig  _ (XNeptuneApiToken xNeptuneApiToken) =
  _mkRequest "GET" ["/api/backend/v1/clients/config"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)
    `addHeader` toHeader ("X-Neptune-Api-Token", xNeptuneApiToken)

data GetClientConfig
-- | @*/*@
instance MimeType mtype => Produces GetClientConfig mtype


-- *** getCreditCard

-- | @GET \/api\/backend\/v1\/payments\/{organizationIdentifier}\/creditCard@
--
-- Returns a Stripe Source object
--
-- AuthMethod: 'AuthOAuthOauth2'
--
getCreditCard
  :: Accept accept -- ^ request accept ('MimeType')
  -> OrganizationIdentifier -- ^ "organizationIdentifier"
  -> NeptuneBackendRequest GetCreditCard MimeNoContent Text accept
getCreditCard  _ (OrganizationIdentifier organizationIdentifier) =
  _mkRequest "GET" ["/api/backend/v1/payments/",toPath organizationIdentifier,"/creditCard"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)

data GetCreditCard
-- | @*/*@
instance MimeType mtype => Produces GetCreditCard mtype


-- *** getCustomer

-- | @GET \/api\/backend\/v1\/payments\/{organizationIdentifier}@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
getCustomer
  :: Accept accept -- ^ request accept ('MimeType')
  -> OrganizationIdentifier -- ^ "organizationIdentifier"
  -> NeptuneBackendRequest GetCustomer MimeNoContent CustomerDTO accept
getCustomer  _ (OrganizationIdentifier organizationIdentifier) =
  _mkRequest "GET" ["/api/backend/v1/payments/",toPath organizationIdentifier]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)

data GetCustomer
-- | @*/*@
instance MimeType mtype => Produces GetCustomer mtype


-- *** getDownloadPrepareRequest

-- | @GET \/api\/leaderboard\/v1\/storage\/downloadRequest@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
getDownloadPrepareRequest
  :: Accept accept -- ^ request accept ('MimeType')
  -> Id -- ^ "id"
  -> NeptuneBackendRequest GetDownloadPrepareRequest MimeNoContent DownloadPrepareRequestDTO accept
getDownloadPrepareRequest  _ (Id id) =
  _mkRequest "GET" ["/api/leaderboard/v1/storage/downloadRequest"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)
    `addQuery` toQuery ("id", Just id)

data GetDownloadPrepareRequest
-- | @*/*@
instance MimeType mtype => Produces GetDownloadPrepareRequest mtype


-- *** getExperiment

-- | @GET \/api\/leaderboard\/v1\/experiments@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
getExperiment
  :: Accept accept -- ^ request accept ('MimeType')
  -> ExperimentId -- ^ "experimentId"
  -> NeptuneBackendRequest GetExperiment MimeNoContent Experiment accept
getExperiment  _ (ExperimentId experimentId) =
  _mkRequest "GET" ["/api/leaderboard/v1/experiments"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)
    `addQuery` toQuery ("experimentId", Just experimentId)

data GetExperiment
-- | @*/*@
instance MimeType mtype => Produces GetExperiment mtype


-- *** getExperimentCharts

-- | @GET \/api\/backend\/v1\/experiments\/{experimentId}\/charts@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
getExperimentCharts
  :: Accept accept -- ^ request accept ('MimeType')
  -> ExperimentId -- ^ "experimentId"
  -> ChartSetId -- ^ "chartSetId"
  -> NeptuneBackendRequest GetExperimentCharts MimeNoContent Charts accept
getExperimentCharts  _ (ExperimentId experimentId) (ChartSetId chartSetId) =
  _mkRequest "GET" ["/api/backend/v1/experiments/",toPath experimentId,"/charts"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)
    `addQuery` toQuery ("chartSetId", Just chartSetId)

data GetExperimentCharts
-- | @*/*@
instance MimeType mtype => Produces GetExperimentCharts mtype


-- *** getExperimentsAttributesNames

-- | @GET \/api\/leaderboard\/v1\/experiments-attributes-names@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
getExperimentsAttributesNames
  :: Accept accept -- ^ request accept ('MimeType')
  -> ProjectIdentifier -- ^ "projectIdentifier"
  -> NeptuneBackendRequest GetExperimentsAttributesNames MimeNoContent ExperimentsAttributesNamesDTO accept
getExperimentsAttributesNames  _ (ProjectIdentifier projectIdentifier) =
  _mkRequest "GET" ["/api/leaderboard/v1/experiments-attributes-names"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)
    `addQuery` toQuery ("projectIdentifier", Just projectIdentifier)

data GetExperimentsAttributesNames
-- | @*/*@
instance MimeType mtype => Produces GetExperimentsAttributesNames mtype


-- *** getLoginActions

-- | @GET \/api\/backend\/v1\/login\/actions@
--
-- Returns a list of actions that backend requires the user to complete before he can start working with Neptune
--
-- AuthMethod: 'AuthOAuthOauth2'
--
getLoginActions
  :: Accept accept -- ^ request accept ('MimeType')
  -> NeptuneBackendRequest GetLoginActions MimeNoContent LoginActionsListDTO accept
getLoginActions  _ =
  _mkRequest "GET" ["/api/backend/v1/login/actions"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)

data GetLoginActions
-- | @*/*@
instance MimeType mtype => Produces GetLoginActions mtype


-- *** getOrganization

-- | @GET \/api\/backend\/v1\/organizations2\/{organization}@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
getOrganization
  :: Accept accept -- ^ request accept ('MimeType')
  -> Organization -- ^ "organization"
  -> NeptuneBackendRequest GetOrganization MimeNoContent OrganizationDTO accept
getOrganization  _ (Organization organization) =
  _mkRequest "GET" ["/api/backend/v1/organizations2/",toPath organization]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)

data GetOrganization
-- | @*/*@
instance MimeType mtype => Produces GetOrganization mtype


-- *** getOrganizationAvatar

-- | @GET \/api\/backend\/v1\/organizations2\/{organizationName}\/avatar@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
-- Note: Has 'Produces' instances, but no response schema
--
getOrganizationAvatar
  :: Accept accept -- ^ request accept ('MimeType')
  -> OrganizationName -- ^ "organizationName"
  -> NeptuneBackendRequest GetOrganizationAvatar MimeNoContent res accept
getOrganizationAvatar  _ (OrganizationName organizationName) =
  _mkRequest "GET" ["/api/backend/v1/organizations2/",toPath organizationName,"/avatar"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)

data GetOrganizationAvatar
-- | @*/*@
instance MimeType mtype => Produces GetOrganizationAvatar mtype


-- *** getOrganizationInvitation

-- | @GET \/api\/backend\/v1\/invitations\/organization\/{invitationId}@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
getOrganizationInvitation
  :: Accept accept -- ^ request accept ('MimeType')
  -> InvitationId -- ^ "invitationId"
  -> NeptuneBackendRequest GetOrganizationInvitation MimeNoContent OrganizationInvitationDTO accept
getOrganizationInvitation  _ (InvitationId invitationId) =
  _mkRequest "GET" ["/api/backend/v1/invitations/organization/",toPath invitationId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)

data GetOrganizationInvitation
-- | @*/*@
instance MimeType mtype => Produces GetOrganizationInvitation mtype


-- *** getOrganizationLimits

-- | @GET \/api\/backend\/v1\/organizations2\/{organizationIdentifier}\/limits@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
getOrganizationLimits
  :: Accept accept -- ^ request accept ('MimeType')
  -> OrganizationIdentifier -- ^ "organizationIdentifier"
  -> NeptuneBackendRequest GetOrganizationLimits MimeNoContent OrganizationLimitsDTO accept
getOrganizationLimits  _ (OrganizationIdentifier organizationIdentifier) =
  _mkRequest "GET" ["/api/backend/v1/organizations2/",toPath organizationIdentifier,"/limits"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)

data GetOrganizationLimits
-- | @*/*@
instance MimeType mtype => Produces GetOrganizationLimits mtype


-- *** getPastInvoices

-- | @GET \/api\/backend\/v1\/payments\/{organizationIdentifier}\/invoices\/past@
--
-- Pass-through to Stripe /v1/invoices
--
-- AuthMethod: 'AuthOAuthOauth2'
--
getPastInvoices
  :: Accept accept -- ^ request accept ('MimeType')
  -> OrganizationIdentifier -- ^ "organizationIdentifier"
  -> NeptuneBackendRequest GetPastInvoices MimeNoContent Text accept
getPastInvoices  _ (OrganizationIdentifier organizationIdentifier) =
  _mkRequest "GET" ["/api/backend/v1/payments/",toPath organizationIdentifier,"/invoices/past"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)

data GetPastInvoices
-- | @*/*@
instance MimeType mtype => Produces GetPastInvoices mtype


-- *** getPricingPlan

-- | @GET \/api\/backend\/v1\/payments\/{organizationIdentifier}\/pricingPlan@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
getPricingPlan
  :: Accept accept -- ^ request accept ('MimeType')
  -> OrganizationIdentifier -- ^ "organizationIdentifier"
  -> NeptuneBackendRequest GetPricingPlan MimeNoContent OrganizationPricingPlanDTO accept
getPricingPlan  _ (OrganizationIdentifier organizationIdentifier) =
  _mkRequest "GET" ["/api/backend/v1/payments/",toPath organizationIdentifier,"/pricingPlan"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)

data GetPricingPlan
-- | @*/*@
instance MimeType mtype => Produces GetPricingPlan mtype


-- *** getProject

-- | @GET \/api\/backend\/v1\/projects\/get@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
getProject
  :: Accept accept -- ^ request accept ('MimeType')
  -> ProjectIdentifier -- ^ "projectIdentifier"
  -> NeptuneBackendRequest GetProject MimeNoContent ProjectWithRoleDTO accept
getProject  _ (ProjectIdentifier projectIdentifier) =
  _mkRequest "GET" ["/api/backend/v1/projects/get"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)
    `addQuery` toQuery ("projectIdentifier", Just projectIdentifier)

data GetProject
-- | @*/*@
instance MimeType mtype => Produces GetProject mtype


-- *** getProjectAvatar

-- | @GET \/api\/backend\/v1\/organizations\/{organizationName}\/projects\/{projectName}\/avatar@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
-- Note: Has 'Produces' instances, but no response schema
--
getProjectAvatar
  :: OrganizationName -- ^ "organizationName"
  -> ProjectName -- ^ "projectName"
  -> NeptuneBackendRequest GetProjectAvatar MimeNoContent res MimeImagePng
getProjectAvatar (OrganizationName organizationName) (ProjectName projectName) =
  _mkRequest "GET" ["/api/backend/v1/organizations/",toPath organizationName,"/projects/",toPath projectName,"/avatar"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)

data GetProjectAvatar
-- | @image/png@
instance Produces GetProjectAvatar MimeImagePng


-- *** getProjectBackground

-- | @GET \/api\/backend\/v1\/organizations\/{organizationName}\/projects\/{projectName}\/background@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
-- Note: Has 'Produces' instances, but no response schema
--
getProjectBackground
  :: Accept accept -- ^ request accept ('MimeType')
  -> OrganizationName -- ^ "organizationName"
  -> ProjectName -- ^ "projectName"
  -> NeptuneBackendRequest GetProjectBackground MimeNoContent res accept
getProjectBackground  _ (OrganizationName organizationName) (ProjectName projectName) =
  _mkRequest "GET" ["/api/backend/v1/organizations/",toPath organizationName,"/projects/",toPath projectName,"/background"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)

data GetProjectBackground
-- | @*/*@
instance MimeType mtype => Produces GetProjectBackground mtype


-- *** getProjectInvitation

-- | @GET \/api\/backend\/v1\/invitations\/project\/{invitationId}@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
getProjectInvitation
  :: Accept accept -- ^ request accept ('MimeType')
  -> InvitationId -- ^ "invitationId"
  -> NeptuneBackendRequest GetProjectInvitation MimeNoContent ProjectInvitationDTO accept
getProjectInvitation  _ (InvitationId invitationId) =
  _mkRequest "GET" ["/api/backend/v1/invitations/project/",toPath invitationId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)

data GetProjectInvitation
-- | @*/*@
instance MimeType mtype => Produces GetProjectInvitation mtype


-- *** getProjectMetadata

-- | @GET \/api\/backend\/v1\/projects\/metadata@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
getProjectMetadata
  :: Accept accept -- ^ request accept ('MimeType')
  -> ProjectIdentifier -- ^ "projectIdentifier"
  -> NeptuneBackendRequest GetProjectMetadata MimeNoContent ProjectMetadataDTO accept
getProjectMetadata  _ (ProjectIdentifier projectIdentifier) =
  _mkRequest "GET" ["/api/backend/v1/projects/metadata"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)
    `addQuery` toQuery ("projectIdentifier", Just projectIdentifier)

data GetProjectMetadata
-- | @*/*@
instance MimeType mtype => Produces GetProjectMetadata mtype


-- *** getSsoConfig

-- | @GET \/api\/backend\/v1\/clients\/sso@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
getSsoConfig
  :: Accept accept -- ^ request accept ('MimeType')
  -> WorkspaceName -- ^ "workspaceName"
  -> NeptuneBackendRequest GetSsoConfig MimeNoContent WorkspaceConfig accept
getSsoConfig  _ (WorkspaceName workspaceName) =
  _mkRequest "GET" ["/api/backend/v1/clients/sso"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)
    `addQuery` toQuery ("workspaceName", Just workspaceName)

data GetSsoConfig
-- | @*/*@
instance MimeType mtype => Produces GetSsoConfig mtype


-- *** getSystemChannels

-- | @GET \/api\/backend\/v1\/channels\/system@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
getSystemChannels
  :: Accept accept -- ^ request accept ('MimeType')
  -> ExperimentId -- ^ "experimentId"
  -> NeptuneBackendRequest GetSystemChannels MimeNoContent [ChannelDTO] accept
getSystemChannels  _ (ExperimentId experimentId) =
  _mkRequest "GET" ["/api/backend/v1/channels/system"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)
    `addQuery` toQuery ("experimentId", Just experimentId)

data GetSystemChannels
-- | @*/*@
instance MimeType mtype => Produces GetSystemChannels mtype


-- *** getSystemMetricValues

-- | @GET \/api\/backend\/v1\/experiments\/{experimentId}\/system\/metrics\/{metricId}\/values@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
getSystemMetricValues
  :: Accept accept -- ^ request accept ('MimeType')
  -> ExperimentId -- ^ "experimentId"
  -> MetricId -- ^ "metricId"
  -> NeptuneBackendRequest GetSystemMetricValues MimeNoContent [SystemMetricValues] accept
getSystemMetricValues  _ (ExperimentId experimentId) (MetricId metricId) =
  _mkRequest "GET" ["/api/backend/v1/experiments/",toPath experimentId,"/system/metrics/",toPath metricId,"/values"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)

data GetSystemMetricValues
instance HasOptionalParam GetSystemMetricValues StartPoint where
  applyOptionalParam req (StartPoint xs) =
    req `addQuery` toQuery ("startPoint", Just xs)
instance HasOptionalParam GetSystemMetricValues EndPoint where
  applyOptionalParam req (EndPoint xs) =
    req `addQuery` toQuery ("endPoint", Just xs)
instance HasOptionalParam GetSystemMetricValues ItemCount where
  applyOptionalParam req (ItemCount xs) =
    req `addQuery` toQuery ("itemCount", Just xs)
-- | @*/*@
instance MimeType mtype => Produces GetSystemMetricValues mtype


-- *** getSystemMetrics

-- | @GET \/api\/backend\/v1\/experiments\/{experimentId}\/system\/metrics@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
getSystemMetrics
  :: Accept accept -- ^ request accept ('MimeType')
  -> ExperimentId -- ^ "experimentId"
  -> NeptuneBackendRequest GetSystemMetrics MimeNoContent [SystemMetric] accept
getSystemMetrics  _ (ExperimentId experimentId) =
  _mkRequest "GET" ["/api/backend/v1/experiments/",toPath experimentId,"/system/metrics"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)

data GetSystemMetrics
-- | @*/*@
instance MimeType mtype => Produces GetSystemMetrics mtype


-- *** getSystemMetricsCSV

-- | @GET \/api\/backend\/v1\/experiments\/{experimentId}\/system\/metrics\/csv@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
-- Note: Has 'Produces' instances, but no response schema
--
getSystemMetricsCSV
  :: Accept accept -- ^ request accept ('MimeType')
  -> ExperimentId -- ^ "experimentId"
  -> NeptuneBackendRequest GetSystemMetricsCSV MimeNoContent res accept
getSystemMetricsCSV  _ (ExperimentId experimentId) =
  _mkRequest "GET" ["/api/backend/v1/experiments/",toPath experimentId,"/system/metrics/csv"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)

data GetSystemMetricsCSV
instance HasOptionalParam GetSystemMetricsCSV Gzipped where
  applyOptionalParam req (Gzipped xs) =
    req `addQuery` toQuery ("gzipped", Just xs)
-- | @*/*@
instance MimeType mtype => Produces GetSystemMetricsCSV mtype


-- *** getUpcomingInvoice

-- | @GET \/api\/backend\/v1\/payments\/{organizationIdentifier}\/invoices\/upcoming@
--
-- Pass-through to Stripe /v1/invoices/upcoming
--
-- AuthMethod: 'AuthOAuthOauth2'
--
getUpcomingInvoice
  :: Accept accept -- ^ request accept ('MimeType')
  -> OrganizationIdentifier -- ^ "organizationIdentifier"
  -> NeptuneBackendRequest GetUpcomingInvoice MimeNoContent Text accept
getUpcomingInvoice  _ (OrganizationIdentifier organizationIdentifier) =
  _mkRequest "GET" ["/api/backend/v1/payments/",toPath organizationIdentifier,"/invoices/upcoming"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)

data GetUpcomingInvoice
-- | @*/*@
instance MimeType mtype => Produces GetUpcomingInvoice mtype


-- *** getUserAvatar

-- | @GET \/api\/backend\/v1\/users\/{username}\/avatar@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
-- Note: Has 'Produces' instances, but no response schema
--
getUserAvatar
  :: Accept accept -- ^ request accept ('MimeType')
  -> UsernameText -- ^ "username"
  -> NeptuneBackendRequest GetUserAvatar MimeNoContent res accept
getUserAvatar  _ (UsernameText username) =
  _mkRequest "GET" ["/api/backend/v1/users/",toPath username,"/avatar"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)

data GetUserAvatar
-- | @*/*@
instance MimeType mtype => Produces GetUserAvatar mtype


-- *** getUserProfile

-- | @GET \/api\/backend\/v1\/userProfile@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
getUserProfile
  :: Accept accept -- ^ request accept ('MimeType')
  -> NeptuneBackendRequest GetUserProfile MimeNoContent UserProfileDTO accept
getUserProfile  _ =
  _mkRequest "GET" ["/api/backend/v1/userProfile"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)

data GetUserProfile
-- | @*/*@
instance MimeType mtype => Produces GetUserProfile mtype


-- *** getUserProfileAvatar

-- | @GET \/api\/backend\/v1\/userProfile\/avatar@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
-- Note: Has 'Produces' instances, but no response schema
--
getUserProfileAvatar
  :: Accept accept -- ^ request accept ('MimeType')
  -> NeptuneBackendRequest GetUserProfileAvatar MimeNoContent res accept
getUserProfileAvatar  _ =
  _mkRequest "GET" ["/api/backend/v1/userProfile/avatar"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)

data GetUserProfileAvatar
-- | @*/*@
instance MimeType mtype => Produces GetUserProfileAvatar mtype


-- *** globalConfiguration0

-- | @GET \/api\/backend\/v1\/config@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
globalConfiguration0
  :: Accept accept -- ^ request accept ('MimeType')
  -> NeptuneBackendRequest GlobalConfiguration0 MimeNoContent GlobalConfiguration accept
globalConfiguration0  _ =
  _mkRequest "GET" ["/api/backend/v1/config"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)

data GlobalConfiguration0
-- | @*/*@
instance MimeType mtype => Produces GlobalConfiguration0 mtype


-- *** healthz

-- | @GET \/api\/backend\/healthz@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
healthz
  :: Accept accept -- ^ request accept ('MimeType')
  -> NeptuneBackendRequest Healthz MimeNoContent [ComponentStatus] accept
healthz  _ =
  _mkRequest "GET" ["/api/backend/healthz"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)

data Healthz
-- | @*/*@
instance MimeType mtype => Produces Healthz mtype


-- *** isOrganizationNameAvailable

-- | @GET \/api\/backend\/v1\/organizations2\/{organizationName}\/available@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
isOrganizationNameAvailable
  :: Accept accept -- ^ request accept ('MimeType')
  -> OrganizationName -- ^ "organizationName"
  -> NeptuneBackendRequest IsOrganizationNameAvailable MimeNoContent OrganizationNameAvailableDTO accept
isOrganizationNameAvailable  _ (OrganizationName organizationName) =
  _mkRequest "GET" ["/api/backend/v1/organizations2/",toPath organizationName,"/available"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)

data IsOrganizationNameAvailable
-- | @*/*@
instance MimeType mtype => Produces IsOrganizationNameAvailable mtype


-- *** leaveProject

-- | @POST \/api\/backend\/v1\/projects\/leave@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
-- Note: Has 'Produces' instances, but no response schema
--
leaveProject
  :: Accept accept -- ^ request accept ('MimeType')
  -> ProjectIdentifier -- ^ "projectIdentifier"
  -> NeptuneBackendRequest LeaveProject MimeNoContent res accept
leaveProject  _ (ProjectIdentifier projectIdentifier) =
  _mkRequest "POST" ["/api/backend/v1/projects/leave"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)
    `addQuery` toQuery ("projectIdentifier", Just projectIdentifier)

data LeaveProject
-- | @*/*@
instance MimeType mtype => Produces LeaveProject mtype


-- *** listMembers

-- | @GET \/api\/backend\/v1\/projects\/users@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
listMembers
  :: Accept accept -- ^ request accept ('MimeType')
  -> NeptuneBackendRequest ListMembers MimeNoContent [UserListDTO] accept
listMembers  _ =
  _mkRequest "GET" ["/api/backend/v1/projects/users"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)

data ListMembers
instance HasOptionalParam ListMembers OrganizationIdentifier where
  applyOptionalParam req (OrganizationIdentifier xs) =
    req `addQuery` toQuery ("organizationIdentifier", Just xs)
instance HasOptionalParam ListMembers ProjectIdentifier where
  applyOptionalParam req (ProjectIdentifier xs) =
    req `addQuery` toQuery ("projectIdentifier", Just xs)
instance HasOptionalParam ListMembers UsernamePrefix where
  applyOptionalParam req (UsernamePrefix xs) =
    req `addQuery` toQuery ("usernamePrefix", Just xs)
instance HasOptionalParam ListMembers Offset where
  applyOptionalParam req (Offset xs) =
    req `addQuery` toQuery ("offset", Just xs)
instance HasOptionalParam ListMembers Limit where
  applyOptionalParam req (Limit xs) =
    req `addQuery` toQuery ("limit", Just xs)
-- | @*/*@
instance MimeType mtype => Produces ListMembers mtype


-- *** listOrganizationMembers

-- | @GET \/api\/backend\/v1\/organizations2\/{organizationIdentifier}\/members@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
listOrganizationMembers
  :: Accept accept -- ^ request accept ('MimeType')
  -> OrganizationIdentifier -- ^ "organizationIdentifier"
  -> NeptuneBackendRequest ListOrganizationMembers MimeNoContent [OrganizationMemberDTO] accept
listOrganizationMembers  _ (OrganizationIdentifier organizationIdentifier) =
  _mkRequest "GET" ["/api/backend/v1/organizations2/",toPath organizationIdentifier,"/members"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)

data ListOrganizationMembers
-- | @*/*@
instance MimeType mtype => Produces ListOrganizationMembers mtype


-- *** listOrganizations

-- | @GET \/api\/backend\/v1\/myOrganizations@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
listOrganizations
  :: Accept accept -- ^ request accept ('MimeType')
  -> NeptuneBackendRequest ListOrganizations MimeNoContent [OrganizationWithRoleDTO] accept
listOrganizations  _ =
  _mkRequest "GET" ["/api/backend/v1/myOrganizations"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)

data ListOrganizations
-- | @*/*@
instance MimeType mtype => Produces ListOrganizations mtype


-- *** listProjectChartSets

-- | @GET \/api\/backend\/v1\/chartSets@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
listProjectChartSets
  :: Accept accept -- ^ request accept ('MimeType')
  -> ProjectId -- ^ "projectId"
  -> NeptuneBackendRequest ListProjectChartSets MimeNoContent [ChartSet] accept
listProjectChartSets  _ (ProjectId projectId) =
  _mkRequest "GET" ["/api/backend/v1/chartSets"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)
    `addQuery` toQuery ("projectId", Just projectId)

data ListProjectChartSets
-- | @*/*@
instance MimeType mtype => Produces ListProjectChartSets mtype


-- *** listProjectMembers

-- | @GET \/api\/backend\/v1\/projects\/membersOf@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
listProjectMembers
  :: Accept accept -- ^ request accept ('MimeType')
  -> ProjectIdentifier -- ^ "projectIdentifier"
  -> NeptuneBackendRequest ListProjectMembers MimeNoContent [ProjectMemberDTO] accept
listProjectMembers  _ (ProjectIdentifier projectIdentifier) =
  _mkRequest "GET" ["/api/backend/v1/projects/membersOf"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)
    `addQuery` toQuery ("projectIdentifier", Just projectIdentifier)

data ListProjectMembers
-- | @*/*@
instance MimeType mtype => Produces ListProjectMembers mtype


-- *** listProjects

-- | @GET \/api\/backend\/v1\/projects@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
listProjects
  :: Accept accept -- ^ request accept ('MimeType')
  -> NeptuneBackendRequest ListProjects MimeNoContent ProjectListDTO accept
listProjects  _ =
  _mkRequest "GET" ["/api/backend/v1/projects"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)

data ListProjects
instance HasOptionalParam ListProjects OrganizationIdentifier where
  applyOptionalParam req (OrganizationIdentifier xs) =
    req `addQuery` toQuery ("organizationIdentifier", Just xs)
instance HasOptionalParam ListProjects ProjectKey where
  applyOptionalParam req (ProjectKey xs) =
    req `addQuery` toQuery ("projectKey", Just xs)
instance HasOptionalParam ListProjects SearchTerm where
  applyOptionalParam req (SearchTerm xs) =
    req `addQuery` toQuery ("searchTerm", Just xs)
instance HasOptionalParam ListProjects Visibility where
  applyOptionalParam req (Visibility xs) =
    req `addQuery` toQuery ("visibility", Just xs)
instance HasOptionalParam ListProjects ViewedUsername where
  applyOptionalParam req (ViewedUsername xs) =
    req `addQuery` toQuery ("viewedUsername", Just xs)
instance HasOptionalParam ListProjects UserRelation where
  applyOptionalParam req (UserRelation xs) =
    req `addQuery` toQuery ("userRelation", Just xs)
instance HasOptionalParam ListProjects OrgRelation where
  applyOptionalParam req (OrgRelation xs) =
    req `addQuery` toQueryColl MultiParamArray ("orgRelation", Just xs)
instance HasOptionalParam ListProjects SortBy where
  applyOptionalParam req (SortBy xs) =
    req `addQuery` toQueryColl MultiParamArray ("sortBy", Just xs)
instance HasOptionalParam ListProjects SortDirection where
  applyOptionalParam req (SortDirection xs) =
    req `addQuery` toQueryColl MultiParamArray ("sortDirection", Just xs)
instance HasOptionalParam ListProjects Offset where
  applyOptionalParam req (Offset xs) =
    req `addQuery` toQuery ("offset", Just xs)
instance HasOptionalParam ListProjects Limit where
  applyOptionalParam req (Limit xs) =
    req `addQuery` toQuery ("limit", Just xs)
-- | @*/*@
instance MimeType mtype => Produces ListProjects mtype


-- *** listProjectsMembers

-- | @GET \/api\/backend\/v1\/projects\/members@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
listProjectsMembers
  :: Accept accept -- ^ request accept ('MimeType')
  -> ProjectIdentifierText -- ^ "projectIdentifier"
  -> NeptuneBackendRequest ListProjectsMembers MimeNoContent [ProjectMembersDTO] accept
listProjectsMembers  _ (ProjectIdentifierText projectIdentifier) =
  _mkRequest "GET" ["/api/backend/v1/projects/members"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)
    `addQuery` toQueryColl MultiParamArray ("projectIdentifier", Just projectIdentifier)

data ListProjectsMembers
instance HasOptionalParam ListProjectsMembers IncludeInvitations where
  applyOptionalParam req (IncludeInvitations xs) =
    req `addQuery` toQuery ("includeInvitations", Just xs)
-- | @*/*@
instance MimeType mtype => Produces ListProjectsMembers mtype


-- *** listUsers

-- | @GET \/api\/backend\/v1\/users@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
listUsers
  :: Accept accept -- ^ request accept ('MimeType')
  -> Username -- ^ "username"
  -> NeptuneBackendRequest ListUsers MimeNoContent [PublicUserProfileDTO] accept
listUsers  _ (Username username) =
  _mkRequest "GET" ["/api/backend/v1/users"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)
    `addQuery` toQueryColl MultiParamArray ("username", Just username)

data ListUsers
-- | @*/*@
instance MimeType mtype => Produces ListUsers mtype


-- *** markExperimentCompleted

-- | @POST \/api\/leaderboard\/v1\/experiments\/markCompleted@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
-- Note: Has 'Produces' instances, but no response schema
--
markExperimentCompleted
  :: (Consumes MarkExperimentCompleted contentType, MimeRender contentType CompletedExperimentParams)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> Accept accept -- ^ request accept ('MimeType')
  -> CompletedExperimentParams -- ^ "completedExperimentParams"
  -> ExperimentId -- ^ "experimentId"
  -> NeptuneBackendRequest MarkExperimentCompleted contentType res accept
markExperimentCompleted _  _ completedExperimentParams (ExperimentId experimentId) =
  _mkRequest "POST" ["/api/leaderboard/v1/experiments/markCompleted"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)
    `setBodyParam` completedExperimentParams
    `addQuery` toQuery ("experimentId", Just experimentId)

data MarkExperimentCompleted
instance HasBodyParam MarkExperimentCompleted CompletedExperimentParams

-- | @*/*@
instance MimeType mtype => Consumes MarkExperimentCompleted mtype

-- | @*/*@
instance MimeType mtype => Produces MarkExperimentCompleted mtype


-- *** pingExperiment

-- | @POST \/api\/leaderboard\/v1\/experiments\/ping@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
-- Note: Has 'Produces' instances, but no response schema
--
pingExperiment
  :: Accept accept -- ^ request accept ('MimeType')
  -> ExperimentId -- ^ "experimentId"
  -> NeptuneBackendRequest PingExperiment MimeNoContent res accept
pingExperiment  _ (ExperimentId experimentId) =
  _mkRequest "POST" ["/api/leaderboard/v1/experiments/ping"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)
    `addQuery` toQuery ("experimentId", Just experimentId)

data PingExperiment
-- | @*/*@
instance MimeType mtype => Produces PingExperiment mtype


-- *** postChannelValues

-- | @POST \/api\/leaderboard\/v1\/channels\/values@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
postChannelValues
  :: (Consumes PostChannelValues contentType, MimeRender contentType ChannelsValues)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> Accept accept -- ^ request accept ('MimeType')
  -> ChannelsValues -- ^ "channelsValues"
  -> ExperimentId -- ^ "experimentId"
  -> NeptuneBackendRequest PostChannelValues contentType [BatchChannelValueErrorDTO] accept
postChannelValues _  _ channelsValues (ExperimentId experimentId) =
  _mkRequest "POST" ["/api/leaderboard/v1/channels/values"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)
    `setBodyParam` channelsValues
    `addQuery` toQuery ("experimentId", Just experimentId)

data PostChannelValues
instance HasBodyParam PostChannelValues ChannelsValues

-- | @*/*@
instance MimeType mtype => Consumes PostChannelValues mtype

-- | @*/*@
instance MimeType mtype => Produces PostChannelValues mtype


-- *** postSystemMetricValues

-- | @POST \/api\/backend\/v1\/experiments\/{experimentId}\/system\/metrics\/values@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
-- Note: Has 'Produces' instances, but no response schema
--
postSystemMetricValues
  :: (Consumes PostSystemMetricValues contentType, MimeRender contentType MetricValues)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> Accept accept -- ^ request accept ('MimeType')
  -> MetricValues -- ^ "metricValues"
  -> ExperimentId -- ^ "experimentId"
  -> NeptuneBackendRequest PostSystemMetricValues contentType res accept
postSystemMetricValues _  _ metricValues (ExperimentId experimentId) =
  _mkRequest "POST" ["/api/backend/v1/experiments/",toPath experimentId,"/system/metrics/values"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)
    `setBodyParam` metricValues

data PostSystemMetricValues
instance HasBodyParam PostSystemMetricValues MetricValues

-- | @*/*@
instance MimeType mtype => Consumes PostSystemMetricValues mtype

-- | @*/*@
instance MimeType mtype => Produces PostSystemMetricValues mtype


-- *** prepareForDownload

-- | @POST \/api\/leaderboard\/v1\/storage\/legacy\/downloadRequest@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
prepareForDownload
  :: Accept accept -- ^ request accept ('MimeType')
  -> ExperimentIdentity -- ^ "experimentIdentity"
  -> Resource -- ^ "resource"
  -> Path -- ^ "path"
  -> NeptuneBackendRequest PrepareForDownload MimeNoContent DownloadPrepareRequestDTO accept
prepareForDownload  _ (ExperimentIdentity experimentIdentity) (Resource resource) (Path path) =
  _mkRequest "POST" ["/api/leaderboard/v1/storage/legacy/downloadRequest"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)
    `addQuery` toQuery ("experimentIdentity", Just experimentIdentity)
    `addQuery` toQuery ("resource", Just resource)
    `addQuery` toQuery ("path", Just path)

data PrepareForDownload
-- | @*/*@
instance MimeType mtype => Produces PrepareForDownload mtype


-- *** resetChannel

-- | @DELETE \/api\/leaderboard\/v1\/channels\/{id}\/values@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
-- Note: Has 'Produces' instances, but no response schema
--
resetChannel
  :: Accept accept -- ^ request accept ('MimeType')
  -> Id -- ^ "id"
  -> NeptuneBackendRequest ResetChannel MimeNoContent res accept
resetChannel  _ (Id id) =
  _mkRequest "DELETE" ["/api/leaderboard/v1/channels/",toPath id,"/values"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)

data ResetChannel
-- | @*/*@
instance MimeType mtype => Produces ResetChannel mtype


-- *** restoreExperiments

-- | @POST \/api\/leaderboard\/v1\/experiments\/trash\/restore@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
restoreExperiments
  :: (Consumes RestoreExperiments contentType, MimeRender contentType ExperimentIds)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> Accept accept -- ^ request accept ('MimeType')
  -> ExperimentIds -- ^ "experimentIds"
  -> NeptuneBackendRequest RestoreExperiments contentType [BatchExperimentUpdateResult] accept
restoreExperiments _  _ experimentIds =
  _mkRequest "POST" ["/api/leaderboard/v1/experiments/trash/restore"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)
    `setBodyParam` experimentIds

data RestoreExperiments
instance HasBodyParam RestoreExperiments ExperimentIds

-- | @*/*@
instance MimeType mtype => Consumes RestoreExperiments mtype

-- | @*/*@
instance MimeType mtype => Produces RestoreExperiments mtype


-- *** revokeApiToken

-- | @DELETE \/api\/backend\/v1\/authorization\/api-token@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
-- Note: Has 'Produces' instances, but no response schema
--
revokeApiToken
  :: Accept accept -- ^ request accept ('MimeType')
  -> NeptuneBackendRequest RevokeApiToken MimeNoContent res accept
revokeApiToken  _ =
  _mkRequest "DELETE" ["/api/backend/v1/authorization/api-token"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)

data RevokeApiToken
-- | @*/*@
instance MimeType mtype => Produces RevokeApiToken mtype


-- *** revokeOrganizationInvitation

-- | @DELETE \/api\/backend\/v1\/invitations\/organization\/{invitationId}@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
-- Note: Has 'Produces' instances, but no response schema
--
revokeOrganizationInvitation
  :: Accept accept -- ^ request accept ('MimeType')
  -> InvitationId -- ^ "invitationId"
  -> NeptuneBackendRequest RevokeOrganizationInvitation MimeNoContent res accept
revokeOrganizationInvitation  _ (InvitationId invitationId) =
  _mkRequest "DELETE" ["/api/backend/v1/invitations/organization/",toPath invitationId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)

data RevokeOrganizationInvitation
-- | @*/*@
instance MimeType mtype => Produces RevokeOrganizationInvitation mtype


-- *** revokeProjectInvitation

-- | @DELETE \/api\/backend\/v1\/invitations\/project\/{invitationId}@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
-- Note: Has 'Produces' instances, but no response schema
--
revokeProjectInvitation
  :: Accept accept -- ^ request accept ('MimeType')
  -> InvitationId -- ^ "invitationId"
  -> NeptuneBackendRequest RevokeProjectInvitation MimeNoContent res accept
revokeProjectInvitation  _ (InvitationId invitationId) =
  _mkRequest "DELETE" ["/api/backend/v1/invitations/project/",toPath invitationId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)

data RevokeProjectInvitation
-- | @*/*@
instance MimeType mtype => Produces RevokeProjectInvitation mtype


-- *** sendQuestionnaire

-- | @PUT \/api\/backend\/v1\/reservations\/{organizationName}\/questionnaire@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
-- Note: Has 'Produces' instances, but no response schema
--
sendQuestionnaire
  :: (Consumes SendQuestionnaire contentType, MimeRender contentType QuestionnaireDTO)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> Accept accept -- ^ request accept ('MimeType')
  -> QuestionnaireDTO -- ^ "questionnaireAnswers"
  -> OrganizationName -- ^ "organizationName"
  -> NeptuneBackendRequest SendQuestionnaire contentType res accept
sendQuestionnaire _  _ questionnaireAnswers (OrganizationName organizationName) =
  _mkRequest "PUT" ["/api/backend/v1/reservations/",toPath organizationName,"/questionnaire"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)
    `setBodyParam` questionnaireAnswers

data SendQuestionnaire
instance HasBodyParam SendQuestionnaire QuestionnaireDTO

-- | @*/*@
instance MimeType mtype => Consumes SendQuestionnaire mtype

-- | @*/*@
instance MimeType mtype => Produces SendQuestionnaire mtype


-- *** sendRegistrationSurvey

-- | @POST \/api\/backend\/v1\/login\/survey@
--
-- Processes the survey. Sending {} means that user declined survey and action is removed
--
-- AuthMethod: 'AuthOAuthOauth2'
--
-- Note: Has 'Produces' instances, but no response schema
--
sendRegistrationSurvey
  :: (Consumes SendRegistrationSurvey contentType, MimeRender contentType RegistrationSurveyDTO)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> Accept accept -- ^ request accept ('MimeType')
  -> RegistrationSurveyDTO -- ^ "survey"
  -> NeptuneBackendRequest SendRegistrationSurvey contentType res accept
sendRegistrationSurvey _  _ survey =
  _mkRequest "POST" ["/api/backend/v1/login/survey"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)
    `setBodyParam` survey

data SendRegistrationSurvey
instance HasBodyParam SendRegistrationSurvey RegistrationSurveyDTO

-- | @*/*@
instance MimeType mtype => Consumes SendRegistrationSurvey mtype

-- | @*/*@
instance MimeType mtype => Produces SendRegistrationSurvey mtype


-- *** setUsername

-- | @POST \/api\/backend\/v1\/login\/username@
--
--  Sets the username as per param. Can be called once, subsequent calls will result in 403 error. Setting to an invalid username will result in 400 error. Setting to an unavailable username will result in 409 error.
--
-- AuthMethod: 'AuthOAuthOauth2'
--
-- Note: Has 'Produces' instances, but no response schema
--
setUsername
  :: Accept accept -- ^ request accept ('MimeType')
  -> UsernameText -- ^ "username"
  -> NeptuneBackendRequest SetUsername MimeNoContent res accept
setUsername  _ (UsernameText username) =
  _mkRequest "POST" ["/api/backend/v1/login/username"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)
    `addQuery` toQuery ("username", Just username)

data SetUsername
-- | @*/*@
instance MimeType mtype => Produces SetUsername mtype


-- *** statusGet

-- | @GET \/api\/backend\/status@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
statusGet
  :: Accept accept -- ^ request accept ('MimeType')
  -> NeptuneBackendRequest StatusGet MimeNoContent A.Value accept
statusGet  _ =
  _mkRequest "GET" ["/api/backend/status"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)

data StatusGet
-- | @*/*@
instance MimeType mtype => Produces StatusGet mtype


-- *** storageUsage0

-- | @GET \/api\/backend\/v1\/storage\/usage@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
storageUsage0
  :: Accept accept -- ^ request accept ('MimeType')
  -> NeptuneBackendRequest StorageUsage0 MimeNoContent StorageUsage accept
storageUsage0  _ =
  _mkRequest "GET" ["/api/backend/v1/storage/usage"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)

data StorageUsage0
instance HasOptionalParam StorageUsage0 OrganizationIdentifier where
  applyOptionalParam req (OrganizationIdentifier xs) =
    req `addQuery` toQuery ("organizationIdentifier", Just xs)
instance HasOptionalParam StorageUsage0 ProjectIdentifier where
  applyOptionalParam req (ProjectIdentifier xs) =
    req `addQuery` toQuery ("projectIdentifier", Just xs)
-- | @*/*@
instance MimeType mtype => Produces StorageUsage0 mtype


-- *** synchronizeSubscription

-- | @PUT \/api\/backend\/v1\/payments\/{organizationName}\/synchronizeSubscription@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
-- Note: Has 'Produces' instances, but no response schema
--
synchronizeSubscription
  :: Accept accept -- ^ request accept ('MimeType')
  -> OrganizationName -- ^ "organizationName"
  -> NeptuneBackendRequest SynchronizeSubscription MimeNoContent res accept
synchronizeSubscription  _ (OrganizationName organizationName) =
  _mkRequest "PUT" ["/api/backend/v1/payments/",toPath organizationName,"/synchronizeSubscription"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)

data SynchronizeSubscription
-- | @*/*@
instance MimeType mtype => Produces SynchronizeSubscription mtype


-- *** tagsGet

-- | @GET \/api\/leaderboard\/v1\/experiments\/tags@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
tagsGet
  :: Accept accept -- ^ request accept ('MimeType')
  -> ProjectIdentifier -- ^ "projectIdentifier"
  -> NeptuneBackendRequest TagsGet MimeNoContent [Text] accept
tagsGet  _ (ProjectIdentifier projectIdentifier) =
  _mkRequest "GET" ["/api/leaderboard/v1/experiments/tags"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)
    `addQuery` toQuery ("projectIdentifier", Just projectIdentifier)

data TagsGet
-- | @*/*@
instance MimeType mtype => Produces TagsGet mtype


-- *** trashExperiments

-- | @POST \/api\/leaderboard\/v1\/experiments\/trash@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
trashExperiments
  :: (Consumes TrashExperiments contentType, MimeRender contentType ExperimentIds)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> Accept accept -- ^ request accept ('MimeType')
  -> ExperimentIds -- ^ "experimentIds"
  -> NeptuneBackendRequest TrashExperiments contentType [BatchExperimentUpdateResult] accept
trashExperiments _  _ experimentIds =
  _mkRequest "POST" ["/api/leaderboard/v1/experiments/trash"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)
    `setBodyParam` experimentIds

data TrashExperiments
instance HasBodyParam TrashExperiments ExperimentIds

-- | @*/*@
instance MimeType mtype => Consumes TrashExperiments mtype

-- | @*/*@
instance MimeType mtype => Produces TrashExperiments mtype


-- *** updateChart

-- | @PUT \/api\/backend\/v1\/chartSets\/{chartSetId}\/charts\/{chartId}@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
updateChart
  :: (Consumes UpdateChart contentType, MimeRender contentType ChartDefinition)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> Accept accept -- ^ request accept ('MimeType')
  -> ChartDefinition -- ^ "chartToUpdate"
  -> ChartId -- ^ "chartId"
  -> ChartSetId -- ^ "chartSetId"
  -> NeptuneBackendRequest UpdateChart contentType Chart accept
updateChart _  _ chartToUpdate (ChartId chartId) (ChartSetId chartSetId) =
  _mkRequest "PUT" ["/api/backend/v1/chartSets/",toPath chartSetId,"/charts/",toPath chartId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)
    `setBodyParam` chartToUpdate

data UpdateChart
instance HasBodyParam UpdateChart ChartDefinition

-- | @*/*@
instance MimeType mtype => Consumes UpdateChart mtype

-- | @*/*@
instance MimeType mtype => Produces UpdateChart mtype


-- *** updateChartSet

-- | @PUT \/api\/backend\/v1\/chartSets\/{chartSetId}@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
updateChartSet
  :: (Consumes UpdateChartSet contentType, MimeRender contentType ChartSetParams)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> Accept accept -- ^ request accept ('MimeType')
  -> ChartSetParams -- ^ "chartSetToUpdate"
  -> ChartSetId -- ^ "chartSetId"
  -> NeptuneBackendRequest UpdateChartSet contentType ChartSet accept
updateChartSet _  _ chartSetToUpdate (ChartSetId chartSetId) =
  _mkRequest "PUT" ["/api/backend/v1/chartSets/",toPath chartSetId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)
    `setBodyParam` chartSetToUpdate

data UpdateChartSet
instance HasBodyParam UpdateChartSet ChartSetParams

-- | @*/*@
instance MimeType mtype => Consumes UpdateChartSet mtype

-- | @*/*@
instance MimeType mtype => Produces UpdateChartSet mtype


-- *** updateExperiment

-- | @PATCH \/api\/leaderboard\/v1\/experiments@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
updateExperiment
  :: (Consumes UpdateExperiment contentType, MimeRender contentType EditExperimentParams)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> Accept accept -- ^ request accept ('MimeType')
  -> EditExperimentParams -- ^ "editExperimentParams"
  -> ExperimentId -- ^ "experimentId"
  -> NeptuneBackendRequest UpdateExperiment contentType Experiment accept
updateExperiment _  _ editExperimentParams (ExperimentId experimentId) =
  _mkRequest "PATCH" ["/api/leaderboard/v1/experiments"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)
    `setBodyParam` editExperimentParams
    `addQuery` toQuery ("experimentId", Just experimentId)

data UpdateExperiment
instance HasBodyParam UpdateExperiment EditExperimentParams

-- | @*/*@
instance MimeType mtype => Consumes UpdateExperiment mtype

-- | @*/*@
instance MimeType mtype => Produces UpdateExperiment mtype


-- *** updateLastViewed

-- | @POST \/api\/backend\/v1\/projects\/updateLastViewed@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
-- Note: Has 'Produces' instances, but no response schema
--
updateLastViewed
  :: Accept accept -- ^ request accept ('MimeType')
  -> ProjectId -- ^ "projectId"
  -> NeptuneBackendRequest UpdateLastViewed MimeNoContent res accept
updateLastViewed  _ (ProjectId projectId) =
  _mkRequest "POST" ["/api/backend/v1/projects/updateLastViewed"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)
    `addQuery` toQuery ("projectId", Just projectId)

data UpdateLastViewed
-- | @*/*@
instance MimeType mtype => Produces UpdateLastViewed mtype


-- *** updateOrganization

-- | @PUT \/api\/backend\/v1\/organizations2\/{organizationId}@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
updateOrganization
  :: (Consumes UpdateOrganization contentType, MimeRender contentType OrganizationUpdateDTO)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> Accept accept -- ^ request accept ('MimeType')
  -> OrganizationUpdateDTO -- ^ "organizationToUpdate"
  -> OrganizationId -- ^ "organizationId"
  -> NeptuneBackendRequest UpdateOrganization contentType OrganizationDTO accept
updateOrganization _  _ organizationToUpdate (OrganizationId organizationId) =
  _mkRequest "PUT" ["/api/backend/v1/organizations2/",toPath organizationId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)
    `setBodyParam` organizationToUpdate

data UpdateOrganization
instance HasBodyParam UpdateOrganization OrganizationUpdateDTO

-- | @*/*@
instance MimeType mtype => Consumes UpdateOrganization mtype

-- | @*/*@
instance MimeType mtype => Produces UpdateOrganization mtype


-- *** updateOrganizationAvatar

-- | @PUT \/api\/backend\/v1\/organizations2\/{organizationId}\/avatar@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
updateOrganizationAvatar
  :: (Consumes UpdateOrganizationAvatar MimeMultipartFormData)
  => Accept accept -- ^ request accept ('MimeType')
  -> AvatarFile -- ^ "avatarFile"
  -> OrganizationId -- ^ "organizationId"
  -> NeptuneBackendRequest UpdateOrganizationAvatar MimeMultipartFormData LinkDTO accept
updateOrganizationAvatar  _ (AvatarFile avatarFile) (OrganizationId organizationId) =
  _mkRequest "PUT" ["/api/backend/v1/organizations2/",toPath organizationId,"/avatar"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)
    `_addMultiFormPart` NH.partFileSource "avatarFile" avatarFile

data UpdateOrganizationAvatar

-- | @multipart/form-data@
instance Consumes UpdateOrganizationAvatar MimeMultipartFormData

-- | @*/*@
instance MimeType mtype => Produces UpdateOrganizationAvatar mtype


-- *** updateOrganizationInvitation

-- | @PUT \/api\/backend\/v1\/invitations\/organization\/{invitationId}@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
updateOrganizationInvitation
  :: (Consumes UpdateOrganizationInvitation contentType, MimeRender contentType OrganizationInvitationUpdateDTO)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> Accept accept -- ^ request accept ('MimeType')
  -> OrganizationInvitationUpdateDTO -- ^ "update"
  -> InvitationId -- ^ "invitationId"
  -> NeptuneBackendRequest UpdateOrganizationInvitation contentType OrganizationInvitationDTO accept
updateOrganizationInvitation _  _ update (InvitationId invitationId) =
  _mkRequest "PUT" ["/api/backend/v1/invitations/organization/",toPath invitationId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)
    `setBodyParam` update

data UpdateOrganizationInvitation
instance HasBodyParam UpdateOrganizationInvitation OrganizationInvitationUpdateDTO

-- | @*/*@
instance MimeType mtype => Consumes UpdateOrganizationInvitation mtype

-- | @*/*@
instance MimeType mtype => Produces UpdateOrganizationInvitation mtype


-- *** updateOrganizationMember

-- | @PATCH \/api\/backend\/v1\/organizations2\/{organizationIdentifier}\/members\/{userId}@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
updateOrganizationMember
  :: (Consumes UpdateOrganizationMember contentType, MimeRender contentType OrganizationMemberUpdateDTO)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> Accept accept -- ^ request accept ('MimeType')
  -> OrganizationMemberUpdateDTO -- ^ "member"
  -> OrganizationIdentifier -- ^ "organizationIdentifier"
  -> UserId -- ^ "userId"
  -> NeptuneBackendRequest UpdateOrganizationMember contentType OrganizationMemberDTO accept
updateOrganizationMember _  _ member (OrganizationIdentifier organizationIdentifier) (UserId userId) =
  _mkRequest "PATCH" ["/api/backend/v1/organizations2/",toPath organizationIdentifier,"/members/",toPath userId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)
    `setBodyParam` member

data UpdateOrganizationMember
instance HasBodyParam UpdateOrganizationMember OrganizationMemberUpdateDTO

-- | @*/*@
instance MimeType mtype => Consumes UpdateOrganizationMember mtype

-- | @*/*@
instance MimeType mtype => Produces UpdateOrganizationMember mtype


-- *** updateProject

-- | @PUT \/api\/backend\/v1\/projects@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
updateProject
  :: (Consumes UpdateProject contentType, MimeRender contentType ProjectUpdateDTO)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> Accept accept -- ^ request accept ('MimeType')
  -> ProjectUpdateDTO -- ^ "projectToUpdate"
  -> ProjectIdentifier -- ^ "projectIdentifier"
  -> NeptuneBackendRequest UpdateProject contentType ProjectWithRoleDTO accept
updateProject _  _ projectToUpdate (ProjectIdentifier projectIdentifier) =
  _mkRequest "PUT" ["/api/backend/v1/projects"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)
    `setBodyParam` projectToUpdate
    `addQuery` toQuery ("projectIdentifier", Just projectIdentifier)

data UpdateProject
instance HasBodyParam UpdateProject ProjectUpdateDTO

-- | @*/*@
instance MimeType mtype => Consumes UpdateProject mtype

-- | @*/*@
instance MimeType mtype => Produces UpdateProject mtype


-- *** updateProjectAvatar

-- | @PUT \/api\/backend\/v1\/projects1\/{projectId}\/avatar@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
updateProjectAvatar
  :: (Consumes UpdateProjectAvatar MimeMultipartFormData)
  => Accept accept -- ^ request accept ('MimeType')
  -> AvatarFile -- ^ "avatarFile"
  -> ProjectId -- ^ "projectId"
  -> NeptuneBackendRequest UpdateProjectAvatar MimeMultipartFormData Link accept
updateProjectAvatar  _ (AvatarFile avatarFile) (ProjectId projectId) =
  _mkRequest "PUT" ["/api/backend/v1/projects1/",toPath projectId,"/avatar"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)
    `_addMultiFormPart` NH.partFileSource "avatarFile" avatarFile

data UpdateProjectAvatar

-- | @multipart/form-data@
instance Consumes UpdateProjectAvatar MimeMultipartFormData

-- | @*/*@
instance MimeType mtype => Produces UpdateProjectAvatar mtype


-- *** updateProjectBackground

-- | @PUT \/api\/backend\/v1\/projects1\/{projectId}\/background@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
updateProjectBackground
  :: (Consumes UpdateProjectBackground MimeMultipartFormData)
  => Accept accept -- ^ request accept ('MimeType')
  -> BackgroundFile -- ^ "backgroundFile"
  -> ProjectId -- ^ "projectId"
  -> NeptuneBackendRequest UpdateProjectBackground MimeMultipartFormData Link accept
updateProjectBackground  _ (BackgroundFile backgroundFile) (ProjectId projectId) =
  _mkRequest "PUT" ["/api/backend/v1/projects1/",toPath projectId,"/background"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)
    `_addMultiFormPart` NH.partFileSource "backgroundFile" backgroundFile

data UpdateProjectBackground

-- | @multipart/form-data@
instance Consumes UpdateProjectBackground MimeMultipartFormData

-- | @*/*@
instance MimeType mtype => Produces UpdateProjectBackground mtype


-- *** updateProjectInvitation

-- | @PUT \/api\/backend\/v1\/invitations\/project\/{invitationId}@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
updateProjectInvitation
  :: (Consumes UpdateProjectInvitation contentType, MimeRender contentType ProjectInvitationUpdateDTO)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> Accept accept -- ^ request accept ('MimeType')
  -> ProjectInvitationUpdateDTO -- ^ "update"
  -> InvitationId -- ^ "invitationId"
  -> NeptuneBackendRequest UpdateProjectInvitation contentType ProjectInvitationDTO accept
updateProjectInvitation _  _ update (InvitationId invitationId) =
  _mkRequest "PUT" ["/api/backend/v1/invitations/project/",toPath invitationId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)
    `setBodyParam` update

data UpdateProjectInvitation
instance HasBodyParam UpdateProjectInvitation ProjectInvitationUpdateDTO

-- | @*/*@
instance MimeType mtype => Consumes UpdateProjectInvitation mtype

-- | @*/*@
instance MimeType mtype => Produces UpdateProjectInvitation mtype


-- *** updateProjectMember

-- | @PATCH \/api\/backend\/v1\/projects\/members\/{userId}@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
updateProjectMember
  :: (Consumes UpdateProjectMember contentType, MimeRender contentType ProjectMemberUpdateDTO)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> Accept accept -- ^ request accept ('MimeType')
  -> ProjectMemberUpdateDTO -- ^ "member"
  -> ProjectIdentifier -- ^ "projectIdentifier"
  -> UserId -- ^ "userId"
  -> NeptuneBackendRequest UpdateProjectMember contentType ProjectMemberDTO accept
updateProjectMember _  _ member (ProjectIdentifier projectIdentifier) (UserId userId) =
  _mkRequest "PATCH" ["/api/backend/v1/projects/members/",toPath userId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)
    `setBodyParam` member
    `addQuery` toQuery ("projectIdentifier", Just projectIdentifier)

data UpdateProjectMember
instance HasBodyParam UpdateProjectMember ProjectMemberUpdateDTO

-- | @*/*@
instance MimeType mtype => Consumes UpdateProjectMember mtype

-- | @*/*@
instance MimeType mtype => Produces UpdateProjectMember mtype


-- *** updateTags

-- | @PUT \/api\/leaderboard\/v1\/experiments\/tags@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
-- Note: Has 'Produces' instances, but no response schema
--
updateTags
  :: (Consumes UpdateTags contentType, MimeRender contentType UpdateTagsParams)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> Accept accept -- ^ request accept ('MimeType')
  -> UpdateTagsParams -- ^ "updateTagsParams"
  -> NeptuneBackendRequest UpdateTags contentType res accept
updateTags _  _ updateTagsParams =
  _mkRequest "PUT" ["/api/leaderboard/v1/experiments/tags"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)
    `setBodyParam` updateTagsParams

data UpdateTags
instance HasBodyParam UpdateTags UpdateTagsParams

-- | @*/*@
instance MimeType mtype => Consumes UpdateTags mtype

-- | @*/*@
instance MimeType mtype => Produces UpdateTags mtype


-- *** updateUserProfile

-- | @PATCH \/api\/backend\/v1\/userProfile@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
updateUserProfile
  :: (Consumes UpdateUserProfile contentType, MimeRender contentType UserProfileUpdateDTO)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> Accept accept -- ^ request accept ('MimeType')
  -> UserProfileUpdateDTO -- ^ "userProfileUpdate"
  -> NeptuneBackendRequest UpdateUserProfile contentType UserProfileDTO accept
updateUserProfile _  _ userProfileUpdate =
  _mkRequest "PATCH" ["/api/backend/v1/userProfile"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)
    `setBodyParam` userProfileUpdate

data UpdateUserProfile
instance HasBodyParam UpdateUserProfile UserProfileUpdateDTO

-- | @*/*@
instance MimeType mtype => Consumes UpdateUserProfile mtype

-- | @*/*@
instance MimeType mtype => Produces UpdateUserProfile mtype


-- *** updateUserProfileAvatar

-- | @PUT \/api\/backend\/v1\/userProfile\/avatar@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
updateUserProfileAvatar
  :: (Consumes UpdateUserProfileAvatar MimeMultipartFormData)
  => Accept accept -- ^ request accept ('MimeType')
  -> AvatarFile -- ^ "avatarFile"
  -> NeptuneBackendRequest UpdateUserProfileAvatar MimeMultipartFormData LinkDTO accept
updateUserProfileAvatar  _ (AvatarFile avatarFile) =
  _mkRequest "PUT" ["/api/backend/v1/userProfile/avatar"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)
    `_addMultiFormPart` NH.partFileSource "avatarFile" avatarFile

data UpdateUserProfileAvatar

-- | @multipart/form-data@
instance Consumes UpdateUserProfileAvatar MimeMultipartFormData

-- | @*/*@
instance MimeType mtype => Produces UpdateUserProfileAvatar mtype


-- *** uploadExperimentOutput

-- | @POST \/api\/leaderboard\/v1\/storage\/legacy\/uploadOutput\/{experimentId}@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
-- Note: Has 'Produces' instances, but no response schema
--
uploadExperimentOutput
  :: Accept accept -- ^ request accept ('MimeType')
  -> ExperimentId -- ^ "experimentId"
  -> NeptuneBackendRequest UploadExperimentOutput MimeNoContent res accept
uploadExperimentOutput  _ (ExperimentId experimentId) =
  _mkRequest "POST" ["/api/leaderboard/v1/storage/legacy/uploadOutput/",toPath experimentId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)

data UploadExperimentOutput
-- | @*/*@
instance MimeType mtype => Produces UploadExperimentOutput mtype


-- *** uploadExperimentOutputAsTarstream

-- | @POST \/api\/leaderboard\/v1\/storage\/legacy\/uploadOutputAsTarStream\/{experimentId}@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
-- Note: Has 'Produces' instances, but no response schema
--
uploadExperimentOutputAsTarstream
  :: Accept accept -- ^ request accept ('MimeType')
  -> ExperimentId -- ^ "experimentId"
  -> NeptuneBackendRequest UploadExperimentOutputAsTarstream MimeNoContent res accept
uploadExperimentOutputAsTarstream  _ (ExperimentId experimentId) =
  _mkRequest "POST" ["/api/leaderboard/v1/storage/legacy/uploadOutputAsTarStream/",toPath experimentId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)

data UploadExperimentOutputAsTarstream
-- | @*/*@
instance MimeType mtype => Produces UploadExperimentOutputAsTarstream mtype


-- *** uploadExperimentSource

-- | @POST \/api\/leaderboard\/v1\/storage\/legacy\/uploadSource\/{experimentId}@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
-- Note: Has 'Produces' instances, but no response schema
--
uploadExperimentSource
  :: Accept accept -- ^ request accept ('MimeType')
  -> ExperimentId -- ^ "experimentId"
  -> NeptuneBackendRequest UploadExperimentSource MimeNoContent res accept
uploadExperimentSource  _ (ExperimentId experimentId) =
  _mkRequest "POST" ["/api/leaderboard/v1/storage/legacy/uploadSource/",toPath experimentId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)

data UploadExperimentSource
-- | @*/*@
instance MimeType mtype => Produces UploadExperimentSource mtype


-- *** uploadExperimentSourceAsTarstream

-- | @POST \/api\/leaderboard\/v1\/storage\/legacy\/uploadSourceAsTarStream\/{experimentId}@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
-- Note: Has 'Produces' instances, but no response schema
--
uploadExperimentSourceAsTarstream
  :: Accept accept -- ^ request accept ('MimeType')
  -> ExperimentId -- ^ "experimentId"
  -> NeptuneBackendRequest UploadExperimentSourceAsTarstream MimeNoContent res accept
uploadExperimentSourceAsTarstream  _ (ExperimentId experimentId) =
  _mkRequest "POST" ["/api/leaderboard/v1/storage/legacy/uploadSourceAsTarStream/",toPath experimentId]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)

data UploadExperimentSourceAsTarstream
-- | @*/*@
instance MimeType mtype => Produces UploadExperimentSourceAsTarstream mtype


-- *** userPricingStatus

-- | @GET \/api\/backend\/v1\/payments\/user\/pricingStatus@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
userPricingStatus
  :: Accept accept -- ^ request accept ('MimeType')
  -> NeptuneBackendRequest UserPricingStatus MimeNoContent UserPricingStatusDTO accept
userPricingStatus  _ =
  _mkRequest "GET" ["/api/backend/v1/payments/user/pricingStatus"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)

data UserPricingStatus
-- | @*/*@
instance MimeType mtype => Produces UserPricingStatus mtype


-- *** validateUsername

-- | @GET \/api\/backend\/v1\/login\/username\/validate@
--
validateUsername
  :: Accept accept -- ^ request accept ('MimeType')
  -> UsernameText -- ^ "username"
  -> NeptuneBackendRequest ValidateUsername MimeNoContent UsernameValidationStatusDTO accept
validateUsername  _ (UsernameText username) =
  _mkRequest "GET" ["/api/backend/v1/login/username/validate"]
    `addQuery` toQuery ("username", Just username)

data ValidateUsername
-- | @*/*@
instance MimeType mtype => Produces ValidateUsername mtype


-- *** version0

-- | @GET \/api\/backend\/version@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
version0
  :: Accept accept -- ^ request accept ('MimeType')
  -> NeptuneBackendRequest Version0 MimeNoContent Version accept
version0  _ =
  _mkRequest "GET" ["/api/backend/version"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)

data Version0
-- | @*/*@
instance MimeType mtype => Produces Version0 mtype


-- *** versionGet

-- | @GET \/version@
--
-- AuthMethod: 'AuthOAuthOauth2'
--
versionGet
  :: Accept accept -- ^ request accept ('MimeType')
  -> NeptuneBackendRequest VersionGet MimeNoContent Version accept
versionGet  _ =
  _mkRequest "GET" ["/version"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthOAuthOauth2)

data VersionGet
-- | @*/*@
instance MimeType mtype => Produces VersionGet mtype

